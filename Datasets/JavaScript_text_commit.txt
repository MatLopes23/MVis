Merge pull request #19240 from Mugen87/dev45

Examples: Clean up.Merge pull request #16461 from Mugen87/dev30

JSM: Added SVGLoader and VRMLLoader Merge pull request #13772 from mrdoob/svgloader

SVGLoader: Basic fill color support.SVGLoader: Trim path data.Merge pull request #13636 from jonobr1/13478-svg-loader

SVGLoader AdditionsSVGLoader: Log unsupported commands only.SVGLoader: Handle command z.Merge pull request #13616 from mrdoob/svgloader

Added basic functionality to SVGLoader.assert: handle (deep) equal(NaN, NaN) as being identical

This aligns the `equal` and `deepEqual()` implementations with the
strict versions by accepting `NaN` as being identical in case both
sides are NaN.

Refs: https://github.com/nodejs/node/issues/30350#issuecomment-552191641

PR-URL: https://github.com/nodejs/node/pull/30766
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: David Carlier <devnexen@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>assert,util: stricter type comparison using deep equal comparisons

This veryfies that both input arguments are always of the identical
type. It was possible to miss a few cases before. This change applies
to all deep equal assert functions (e.g., `assert.deepStrictEqual()`)
and to `util.isDeepStrictEqual()`.

PR-URL: https://github.com/nodejs/node/pull/30764
Refs: https://github.com/nodejs/node/pull/30743
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: David Carlier <devnexen@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>lib: enforce use of Array from primordials

PR-URL: https://github.com/nodejs/node/pull/30635
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>lib: flatten access to primordials

Store all primordials as properties of the primordials object.
Static functions are prefixed by the constructor's name and prototype
methods are prefixed by the constructor's name followed by "Prototype".
For example: primordials.Object.keys becomes primordials.ObjectKeys.

PR-URL: https://github.com/nodejs/node/pull/30610
Refs: https://github.com/nodejs/node/issues/29766
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>util: assert: fix deepEqual comparing fake-boxed to real boxed primitive

PR-URL: https://github.com/nodejs/node/pull/29029
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Gus Caplan <me@gus.host>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Rich Trott <rtrott@gmail.com>assert: loose deep equal should not compare symbol properties

This is the way it's currently documented and that seems appropriate
for loose equal assertions. The change was not intentional.

Fixes: https://github.com/nodejs/node/issues/27652

PR-URL: https://github.com/nodejs/node/pull/27653
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Yongsheng Zhang <zyszys98@gmail.com>lib: use safe methods from primordials

This changes the primordials to expose built-in prototypes with their
methods already uncurried.
The uncurryThis function is therefore moved to the primordials.
All uses of uncurryThis on built-ins are changed to import the relevant
prototypes from primordials.
All uses of Function.call.bind are also changed to use primordials.

PR-URL: https://github.com/nodejs/node/pull/27096
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>assert: adjust loose assertions

This changes the loose deep equal comparison by using the same logic
as done in the strict deep equal comparison besides comparing
primitives loosely, not comparing symbol properties and not comparing
the prototype.

`assert.deepEqual` is still commenly used and this is likely the
biggest pitfall.

Most changes are only minor and won't have a big impact besides
likely fixing user expectations.

PR-URL: https://github.com/nodejs/node/pull/25008
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Daniel Bevenius <daniel.bevenius@gmail.com>util,assert: improve comparison performance

This adds a smarter logic to compare object keys (including symbols)
and it also skips the object key comparison for (typed) arrays, if
possible.

Besides that it adds a fast path for empty objects, arrays, sets and
maps and fast paths for sets and maps with an unequal size.

On top of that a few functions are now safer to call by using
uncurryThis and by caching the actual function.

Overall, this is a significant performance boost for comparisons.

PR-URL: https://github.com/nodejs/node/pull/22258
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>util,assert: expose util.isDeepStrictEqual()

Provide `util.isDeepStrictEqual()` that works like
`assert.deepStrictEqual()` but returns a boolean rather than throwing an
error.

Several userland modules have needed this functionality and implemented
it independently. This functionality already exists in Node.js core, so
this exposes it for use by modules. Modules that have needed this
functionality include `lodash`, `concordance` (used by `ava`), and
`qunit`.

PR-URL: https://github.com/nodejs/node/pull/16084
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Evan Lucas <evanlucas@me.com>
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Reviewed-By: Ali Ijaz Sheikh <ofrobots@google.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>tools: update ESLint to 7.1.0

Update ESLint to 7.1.0

PR-URL: https://github.com/nodejs/node/pull/33526
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Anto Aravinth <anto.aravinth.cse@gmail.com>
Reviewed-By: Zeyu Yang <himself65@outlook.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>tools: move eslint from tools to tools/node_modules

This is required because we need to add the babel-eslint dependency
and it has to be able to resolve "eslint".
babel-eslint is required to support future ES features such as async
iterators and import.meta.

Refs: https://github.com/nodejs/node/pull/17755
PR-URL: https://github.com/nodejs/node/pull/17820
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>tools: update ESLint to 4.2.0

ESLint 4.2.0 contains a fix for a bug that is blocking us from moving to
the non-legacy stricter indentation linting. Update to 4.2.0 to remove
the blocking issue.

PR-URL: https://github.com/nodejs/node/pull/14155
Ref: https://github.com/eslint/eslint/issues/8882
Ref: https://github.com/eslint/eslint/pull/8885
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Gibson Fahnestock <gibfahn@gmail.com>
Reviewed-By: Refael Ackermann <refack@gmail.com>tools: update ESLint to current version

We have been stalled on ESLint 3.8.0 for some time. Current ESLint is
3.13.0. We have been unable to upgrade because of more aggressive
reporting on some rules, including indentation.

ESLint configuration options and bugfixes are now such that we can
reasonably upgrade.

PR-URL: https://github.com/nodejs/node/pull/10561
Reviewed-By: Teddy Katz <teddy.katz@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Sam Roberts <vieuxtech@gmail.com>tools: update ESLint to version 2.1.0

Update ESLint to 2.1.0. ESLint has a number of potentially-useful new
features but this change attempts to be minimal in its changes.
However, some things could not be avoided reasonably.

ESLint 2.1.0 found a few lint issues that ESLing 1.x missed with
template strings that did not take advantage of any features of
template strings, and `let` declarations where `const` sufficed.

Additionally, ESLint 2.1.0 removes some granularity around enabling ES6
features. Some features (e.g., spread operator) that had been turned off
in our configuration for ESLint 1.x are now permitted.

PR-URL: https://github.com/nodejs/node/pull/5214
Reviewed-By: Michaël Zasso <mic.besace@gmail.com>
Reviewed-By: jbergstroem - Johan Bergström <bugs@bergstroem.nu>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>
Reviewed-By: Myles Borins <myles.borins@gmail.com>tools: update eslint to v1.10.3

PR-URL: https://github.com/nodejs/io.js/pull/2286
Reviewed-By: Roman Reiss <me@silverwind.io>tools: replace closure-linter with eslint

PR-URL: https://github.com/iojs/io.js/pull/1539
Fixes: https://github.com/iojs/io.js/issues/1253
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Reviewed-By: Trevor Norris <trev.norris@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>
Reviewed-By: Chris Dickinson <christopher.s.dickinson@gmail.com>
Reviewed-By: Johan Bergström <bugs@bergstroem.nu>
Reviewed-By: Fedor Indutny <fedor.indutny@gmail.com>Merge pull request #16745 from looeee/convert_nrrdloader_to_module

Add modules and TS defs for Volume, VolumeSlice, NRRDLoaderMerge pull request #14825 from Mugen87/dev9

Examples: Clean upMerge pull request #10140 from TristanVALCKE/example_warning_fix

Example warning fixClean up.Merge pull request #8364 from stity/nrrdLoader2

Cleaned NRRD LoaderMerge pull request #19177 from Mugen87/dev49

TransformControls: Fix arguments of intersectObjectWithRay().Merge pull request #19152 from io-gui/dev

TransformControls: Fix ability to disable axes.Merge pull request #18146 from arodic/feature/TransformControlls-scaleSnap

Added scaleSnap to TransformControls. Fixes #14902Merge pull request #16472 from Mugen87/dev30

JSM: More modules and TS files.Merge pull request #16051 from arodic/patch/TransformControls-rotated-scale

Fixed TransformControls scale in rotated frame.Merge pull request #15544 from arodic/fix/15521_transform_controls

TransformControls: Fixed problem with transformed parents.Merge pull request #14789 from Mugen87/dev2

Global: Improve code styleMerge pull request #14170 from arodic/transform-controls

TransformControls v2tools: update ESLint to 7.4.0

Update ESLint to 7.4.0

PR-URL: https://github.com/nodejs/node/pull/34205
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Rich Trott <rtrott@gmail.com>tools: update ESLint to 7.0.0-alpha.3

Update ESLint to 7.0.0-alpha.3

PR-URL: https://github.com/nodejs/node/pull/32533
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>tools: update ESLint to 6.7.1

Update ESLint to 6.7.1

PR-URL: https://github.com/nodejs/node/pull/30598
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>tools: update ESLint to 5.15.0

Update ESLint to 5.15.0

PR-URL: https://github.com/nodejs/node/pull/26391
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Masashi Hirano <shisama07@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>tools: update ESLint to 5.11.0

Update ESLint to 5.11.0.

PR-URL: https://github.com/nodejs/node/pull/25191
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>tools: update ESLint to 5.10.0

Update ESLint to 5.10.0.

PR-URL: https://github.com/nodejs/node/pull/24903
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Franziska Hinkelmann <franziska.hinkelmann@gmail.com>tools: update ESLint to 5.7.0

Update ESLint to 5.7.0.

PR-URL: https://github.com/nodejs/node/pull/23629
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Sakthipriyan Vairamani <thechargingvolcano@gmail.com>tools: update eslint to v5.5.0

PR-URL: https://github.com/nodejs/node/pull/22720
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>tools: update ESLint to 5.0.0

This is a new major release of ESLint.

PR-URL: https://github.com/nodejs/node/pull/20855
Reviewed-By: Rich Trott <rtrott@gmail.com>tools: update ESLint to 4.15.0

PR-URL: https://github.com/nodejs/node/pull/17820
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>tools: update ESLint to 3.3.0 and enable rules

Update ESLint 3.3.0 and update .eslintrc:

* replace deprecated no-negated-in-lhs rule with no-unsafe-negation
  * http://eslint.org/docs/rules/no-negated-in-lhs
  * http://eslint.org/docs/rules/no-unsafe-negation
* enable no-template-curly-in-string
  * http://eslint.org/docs/rules/no-template-curly-in-string
* enable no-global-assign
  * http://eslint.org/docs/rules/no-global-assign
* enable func-call-spacing
  * http://eslint.org/docs/rules/func-call-spacing

PR-URL: https://github.com/nodejs/node/pull/8097
Reviewed-By: targos - Michaël Zasso <mic.besace@gmail.com>
Reviewed-By: jasnell - James M Snell <jasnell@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>tools: update to ESLint 3.2.2

PR-URL: https://github.com/nodejs/node/pull/7999
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Johan Bergström <bugs@bergstroem.nu>tools: update ESLint to 2.9.0

ESLint 2.9.0 fixes some minor bugs that we have been experiencing and
introduces some new rules that we may wish to consider.

PR-URL: https://github.com/nodejs/node/pull/6498
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>tools: update ESLint to 7.0.0

Update ESLint to 7.0.0

PR-URL: https://github.com/nodejs/node/pull/33316
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Zeyu Yang <himself65@outlook.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>deps: upgrade npm to 3.3.10

PR-URL: https://github.com/nodejs/node/pull/3599
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>deps: upgrade npm to 3.3.6

PR-URL: https://github.com/nodejs/node/pull/3310
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>Merge remote-tracking branch 'upstream/v0.10' into v0.12

Conflicts:
	ChangeLog
	deps/v8/src/hydrogen.cc
	lib/http.js
	lib/querystring.js
	src/node_crypto.cc
	src/node_version.h
	test/simple/test-querystring.jsMerge branch 'eslint-prettier' into develop (#5462)[locale] Relative seconds i18n (#4183)

* locales ru, uk: added relative seconds

* feat(i18n): add relativeSeconds for zh-*

* feat(i18n): add relativeSeconds for en-*

* af

* ar

* az

* be

* add relativeSeconds for th

* add relativeSeconds for vi

* ar-dz

* change style

* bg

* bm

* bn

* add relativeSeconds for fr-*

* add relativeSeconds for de-*

* add relativeSeconds for es-*

* ja

* ms

* nl

* pt

* jv

* it

* ca

* cv

* cy

* da

* el

* eo

* eu

* lo

* my

* ta

* fix lo

* si

* sv

* fy

* gl

* gu

* hr

* hu

* id

* pl

* bs

* remove executable mode on pl.js

* fi

* lb

* lt

* lv

* me

* mi

* mk

* ml

* mr

* nb

* pa-in

* uz-latn

* te tet tl-ph tlh tr tzl tzm tzm-latn ur uz x-pseudo yo

* fix tzm

* et

* fa

* fo

* gd

* sd se si sk sl sq sr sr-cyrl ss sw

* mr ms-my ne nn

* kk km kn ky

* fix ro

* fix tlh

* fix tzl

* fix tlh ro

* gom-latn

* he

* is

* fix pl

* fix sw sr-cyrl sr

* fix nn

* fix sl

* fix sk

* hy-am

* hi

* gom-latn

* et

* fix sr

* dv

* fix sk

* ar-ly

* bo

* cs

* bs

* ar-kw

* ar-ma

* ar-tn

* ar-sa

* fix ar-dz

* br

* fix ka

* fix tl-ph

* fix az from CLDR

* fix bm from CLDR

* fix bs from CLDR

* fix cs from CLDR

* fix fo from CLDR

* fix gu from CLDR

* fix hr from CLDR

* fix ka from CLDR

* fix km from CLDR

* fix my from CLDR

* fix ne from CLDR

* fix sk from CLDR

* fix sr-cyrl from CLDR

* fix sr from CLDR

* fix te from CLDR

* fix styleMerge pull request #3218 from monoblaine:jscs-editing

Fix jscs 3.0 errorsMerge pull request #2168 from moment/feature/es6-modules

ES6 ModulesBuild 2.25.2Build 2.25.0Build 2.22.0Build 2.20.0Build 2.16.0Build 2.14.0Use only single quotesMerge pull request #1761 from icambron/language_rework

s/lang/localeMerge branch 'feature/umd-lang' into develop

Conflicts:
	lang/nb.jsmerging in developMerge branch 'master' of github.com:timrwood/momentBump flow-parser from 0.121.0 to 0.122.0 (#7935)

* Bump flow-parser from 0.121.0 to 0.122.0

Bumps [flow-parser](https://github.com/facebook/flow) from 0.121.0 to 0.122.0.
- [Release notes](https://github.com/facebook/flow/releases)
- [Changelog](https://github.com/facebook/flow/blob/master/Changelog.md)
- [Commits](https://github.com/facebook/flow/compare/v0.121.0...v0.122.0)

Signed-off-by: dependabot-preview[bot] <support@dependabot.com>

* Remove ForAwaitStatement

* Remove RestProperty

* Add tests for for-await

* Fix snapshots

Co-authored-by: dependabot-preview[bot] <27856297+dependabot-preview[bot]@users.noreply.github.com>
Co-authored-by: Sosuke Suzuki <aosukeke@gmail.com>Merge branch 'master' of github.com:prettier/prettier into next

* 'master' of github.com:prettier/prettier: (43 commits)
  Update `postcss-less` to v2 (#6778)
  Show invalid config filename in error message (#6865)
  Change external links to https (#6874)
  Bump @babel/parser from 7.7.0 to 7.7.2 (#6862)
  Fix nullish coalescing parenthesis with mixed logical operators (#6863)
  Remove handlebars@4.4.5 requirement in yarn.lock (#6867)
  Update browerslist in yarn.lock (#6868)
  fix formatting of comments in flow enums (#6860)
  better formatting for AwaitExpression in CallExpression/MemberExpression (#6856)
  Bump @typescript-eslint/typescript-estree from 2.6.0 to 2.6.1 (#6805)
  test: issue #6283 (#6855)
  audit(critical): handlebars@4.4.5 in package resolutions (#6853)
  Flow enums (#6833)
  Add mongo as a VS Code supported language (#6848)
  Bump `eslint` from 6.5.1 to 6.6.0 (#6846)
  Upgrade flow-parser from 0.89 to 0.111 (#6830)
  Bump @babel/preset-react from 7.6.3 to 7.7.0 in /website (#6827)
  Bump typescript from 3.7.1-rc to 3.7.2 (#6832)
  Bump rollup from 1.26.0 to 1.26.3 (#6821)
  update Babel to 7.7.0 and enable error recovery (#6816)
  ...chore: update typescript-estree to new package name (#5799)
fix: update typescript and typescript-estree to latest (#5728)
Move needsParens to a language-specific file (#4201)
Prettier Plugin API (#3536)

* Move files around in preparation for refactor

* Update paths in build script

* Extract generic printing logic from the JavaScript printer

* Conform printer API

* Fixup decorator handling

* Fix multiparser

* Create plugin entry for markdown

* Create plugin entry for javascript/typescript

* Create plugin entry for html

* Create plugin entry for graphql

* Create plugin entry for css/less/scss

* Move JSON to JS plugin entry

* Integrate plugins into getSupportInfo()

* Move astFormat to parser definition

* Move util to common

* Implement parser loading

* remark -> mdast

* Rename cli/cli -> cli/index

* Rename builder -> doc package, fix printer resolution

* Fix doc shape assumption in CSS-in-JS logic

* Fix third-party.js prod resolution

* Fixup build-docs script

* Distribute multiparser code

* Remove requirement to forward options

* Flatten closure

* Remove debug directory

* Expose doc

* Add external plugins

* Pass options to loadPlugins

* Export getParsers

* Pin resolve version

* Use getSupportInfo in Markdown embed

* Document plugin API

* Update build-docs

* Add CLI for plugins

* Lint docs

* Fixup build.js

* Add vue language

* Fixup multiparser for vue

* Upgrade rollup and rollup-plugin-commonjs

* Fixup third-party build

* Change AST format in docsUpdate tsep to v11 and update snapshot (#3471)

* Update tsep to v11 and update snapshot

* Remove unneeded TSNamespaceFunctionDeclarationAdd support for ClassPrivateProperty (#2837)
Fix masterRemove last call site of ast-types (#1746)

I console.log'd when it passed and ran the test suite, then uniqui-fied the results :)tools: update ESLint to v3.8.0

Update ESLint to v3.8.0.

* Installed with `npm install --production` to avoid installing
  unnecessary dev files
* Used `dmn -f clean` to further eliminate unneeded files

PR-URL: https://github.com/nodejs/node/pull/9112
Reviewed-By: Teddy Katz <teddy.katz@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>Merge pull request #18456 from WestLangley/dev_examples_apply_matrix4

Examples: .applyMatrix() -> .applyMatrix4()Merge pull request #17666 from Mugen87/dev9

BufferGeometry: Introduce .setAttribute() and .deleteAttribute().Merge pull request #13315 from Mugen87/dev8

TeapotBufferGeometry: Fix serialization/deserializationMerge branch 'dev'Merge pull request #7768 from mrdoob/dev-teapot

Make the default lid properly-sizedUpdated examples.Fixed TeapotBufferGeometry.Merge pull request #7047 from erich666/dev

Add Utah teapot as a geometry object; doc cleanupMerge pull request #16571 from Mugen87/dev30

JSM: Added more module and TS files for geometries.Merge pull request #709 from k2s/develop

added slovak languageMerge pull request #1426 from JakubOnderka/develop

@changelog
@section bugfix
@description Changed longDateFormat of LT a L to right format used in Czech languagefix($parse): treat falsy values as defined in assignment expressions

Closes #14990
Closes #14994fix($parse): validate assignment lval in parser phase

The parser always threw an error in the case of an invalid left-value
assignment but it was an unhelpful:

```
Cannot set property 'undefined' of undefined
```

This commit provides a more meaningful error message, so it is not a
breaking change.

Closes #15234refactor($parse): remove Angular expression sandbox

The angular expression parser (`$parse`) attempts to sandbox expressions
to prevent unrestricted access to the global context.

While the sandbox was not on the frontline of the security defense,
developers kept relying upon it as a security feature even though it was
always possible to access arbitrary JavaScript code if a malicious user
could control the content of Angular templates in applications.

This commit removes this sandbox, which has the following benefits:

* it sends a clear message to developers that they should not rely on
the sandbox to prevent XSS attacks; that they must prevent control of
expression and templates instead.
* it allows performance and size improvements in the core Angular 1
library.
* it simplifies maintenance and provides opportunities to make the
parser more capable.

Please see the [Sandbox Removal Blog Post](http://angularjs.blogspot.com/2016/09/angular-16-expression-sandbox-removal.html)
for more detail on what you should do to ensure that your application is
secure.

Closes #15094feat($parse): Add support for ES6 object initializers

- Add support for computed property names
- Add support for short notation in properties definitions

Eg. The expressions `{x}` and `{[x + 'foo']: 1}` are now valid.perf($parse): Inline constants

Inline constants definitions in function calls, array definitions
and object values.

For the expression [1, {foo: "bar"}, 1 + 2] it changes it from

```js
// After some reordering and cleanup
var v1 = 1;
var v2 = "bar";
var v3 = {foo: v2};
var v4 = 1;
var v5 = 2;
var v6 = plus(v4, v5);
var v7 = [v1, v3, v6];
return v7;
```

to

```js
return [1, {foo: "bar"}, plus(1, 2)];
```

Expression parts that are not constants did not change, and still generate a lot
of intermediate variables.

Closes: #14293feat($parse): provide a mechanism to access the locals object

Extends the built-in identifiers definitions by adding `$local`. This is a
non-assignable reference to the locals object.

Closes: #13247
Closes: #13454fix($parse): prevent assignment on constructor properties

Prevent malicious attacks involving assignment on `constructor` properties.

Closes #13417fix($parse): fix typo in error message ("assing" -> "assign")

Closes #12940fix($parse): block assigning to fields of a constructor

Throw when assigning to a field of a constructor.

Closes #12860fix($parse): do not convert to string computed properties multiple times

Do not convert to string properties multiple times.fix($parse): set null reference properties to `undefined`

When there is an expression of the form
* true && a.b.c
* true && a()
* true && a()()
* false || a.b.c
* false || a()
* false || a()()

where `a == null`

Closes #12099fix($parse): set null reference properties to `undefined`

When there is an expression of the form `true && a.b` and where `a == null`, then set
the value of `true && a.b` to `undefined`.

Closes #11959fix($parse): fix parse errors on older Android WebViews which choke with reserved keywords

Closes #11455fix($parse): Initialize elements in an array from left to right

When constructing an array, never lazy initialize the elements and build
the array strictly from left to right.
When evaluating the expressions in a function call, never do so lazy.
When evaluating expressions inside object literals, never do so lazy.

Closes: #10968fix($parse): handle null targets at assign

When assigning to a sub property of a property that its value is `null`
then write an empty object to the property that will contain the sub-propertyrefactor($parse): new and more performant $parse

Change the way parse works from the old mechanism to a multiple stages
parsing and code generation. The new parse is a four stages parsing
* Lexer
* AST building
* AST processing
* Cacheing, one-time binding and `$watch` optimizations

The Lexer phase remains unchanged.

AST building phase follows Mozilla Parse API [1] and generates an AST that
is compatible. The only exception was needed for `filters` as JavaScript
does not support filters, in this case, a filter is transformed into a
`CallExpression` that has an extra property named `filter` with the value
of `true`.

The AST processing phase transforms the AST into a function that can be
executed to evaluate the expression. The logic for expressions remains
unchanged. The AST processing phase works in two different ways depending
if csp is enabled or disabled. If csp is enabled, the processing phase
returns pre-generated function that interpret specific parts of the AST.
When csp is disabled, then the entire expression is compiled into a single
function that is later evaluated using `Function`. In both cases, the
returning function has the properties `constant`, `literal` and `inputs`
as in the previous implementation. These are used in the next phase to
perform different optimizations.

The cacheing, one-time binding and `$watch` optimizations phase remains
mostly unchanged.

[1] https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_APItools: update ESLint to 7.5.0

Update ESLint to 7.5.0

PR-URL: https://github.com/nodejs/node/pull/34423
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>tools: update ESLint to 7.2.0

Update ESLint to 7.2.0

PR-URL: https://github.com/nodejs/node/pull/33776
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: David Carlier <devnexen@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Evan Lucas <evanlucas@me.com>tools: update ESLint to 6.2.2

Update ESLint to 6.2.2

PR-URL: https://github.com/nodejs/node/pull/29320
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Daniel Bevenius <daniel.bevenius@gmail.com>
Reviewed-By: Yongsheng Zhang <zyszys98@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>tools: update eslint

PR-URL: https://github.com/nodejs/node/pull/27670
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Richard Lau <riclau@uk.ibm.com>
Reviewed-By: Refael Ackermann (רפאל פלחי) <refack@gmail.com>
Reviewed-By: Daijiro Wachi <daijiro.wachi@gmail.com>
Reviewed-By: Ujjwal Sharma <usharma1998@gmail.com>tools: update ESLint to 5.3.0

PR-URL: https://github.com/nodejs/node/pull/22134
Reviewed-By: Bryan English <bryan@bryanenglish.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Jon Moss <me@jonathanmoss.me>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>tools: update to ESLint 4.8.0

PR-URL: https://github.com/nodejs/node/pull/16199
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Yuta Hiroto <hello@about-hiroppy.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>tools: update ESLint to 3.19.0

PR-URL: https://github.com/nodejs/node/pull/12162
Reviewed-By: Teddy Katz <teddy.katz@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Yuta Hiroto <hello@about-hiroppy.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>tools: update ESLint, fix unused vars bug

Update ESLint to 3.0.0. This includes an enhancement to `no-unused-vars`
such that it finds a few instances in our code base that it did not find
previously (fixed in previous commits readying this for landing).

PR-URL: https://github.com/nodejs/node/pull/7601
Reviewed-By: Michaël Zasso <mic.besace@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>Merge pull request #19994 from DefinitelyMaybe/src/geometires--move-to-es6-classes

geometries: move to es6 classesMerge pull request #19503 from Mugen87/dev49

Core: More usage of let/const.Merge pull request #14233 from ffdybuster/bevel-subtract

Allow bevel to be subtracted (instead of being added)Merge pull request #13949 from Mugen87/dev4

 ExtrudeGeometry: Renamed option "amount" to "depth".Merge pull request #13795 from Mugen87/dev1

ExtrudeGeometry: Refactor interface.tools: update ESLint to 2.7.0

PR-URL: https://github.com/nodejs/node/pull/6132
Reviewed-By: Brian White <mscdex@mscdex.net>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: thefourtheye <thechargingvolcano@gmail.com>tools: update ESLint to 5.2.0

PR-URL: https://github.com/nodejs/node/pull/21817
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>
Reviewed-By: James M Snell <jasnell@gmail.com>tools: update to ESLint 4.10.0

PR-URL: https://github.com/nodejs/node/pull/16738
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Anatoli Papirovski <apapirovski@mac.com>Build 2.19.3Merge branch 'master' of github.com:timrwood/momenttools: add babel-eslint

Create tools/update-babel-eslint.sh script and execute it to do the
first installation of the package.
Update tools/license-builder.sh and execute it to add babel-eslint's
license to our LICENSE file.

PR-URL: https://github.com/nodejs/node/pull/17820
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>Merge pull request #19748 from sciecode/dev-zlib

Zlib: update external library, introduces 'Deflate'Merge pull request #16550 from Mugen87/dev33

VTKLoader: Handle invalid DATASET types.Merge pull request #14990 from gero3/patch-4

remove unnecessary checksVTKLoader: Clean up.Merge pull request #12280 from tlbtlbtlb/dev

VTKLoader: Support Int32 DataArray, and allow tabs in XMLMerge pull request #12168 from Mugen87/dev3

Loaders: Improve code qualityMerge pull request #11045 from andreyyudin/dev

VTK header is now parsed and used to extract all the compressed dataVTKLoader clean up.
@dvenkatsagar do you mind trying it with your models to make sure I didn't break anything?Merge pull request #8281 from dvenkatsagar/xml_vtp

Added VTP support for VTK. Fixes #8199Merge pull request #19046 from yomboprime/hasefroch

LDrawLoader (packLDrawModel.js) Fix LGTM errorMerge pull request #16349 from Mugen87/dev30

Utils: Clean upMerge pull request #15987 from donmccurdy/jsm-utils

JSM: Convert utils/Merge pull request #15453 from yomboprime/ldraw

LDrawLoaderstream: construct

Provide a standardized way of asynchronously creating and
initializing resources before performing any work.

Refs: https://github.com/nodejs/node/issues/29314

PR-URL: https://github.com/nodejs/node/pull/29656
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>stream: consistent punctuation

Cleanup comments to use consistent punctuation.

PR-URL: https://github.com/nodejs/node/pull/32934
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Gerhard Stöbich <deb2001-github@yahoo.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Juan José Arboleda <soyjuanarbol@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: use callback to properly propagate error

The stream will be destroyed upstream through the proper error
flow.

PR-URL: https://github.com/nodejs/node/pull/29179
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: change var to let/const in stream files

PR-URL: https://github.com/nodejs/node/pull/32214
Reviewed-By: Robert Nagy <ronagy@icloud.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>lib: use static Number properties from primordials

PR-URL: https://github.com/nodejs/node/pull/30686
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: do not call _read() after destroy()

PR-URL: https://github.com/nodejs/node/pull/29491
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Minwoo Jung <minwoo@nodesource.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>stream: fix readable state `awaitDrain` increase in recursion

PR-URL: https://github.com/nodejs/node/pull/27572
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: simplify howMuchToRead()

This slightly refactors read by moving side effects out of
howMuchToRead().

We don't actually have to set state.needReadable = true; in
howMuchToRead() since read handles 0 return as needReadable.

PR-URL: https://github.com/nodejs/node/pull/29155
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: resolve perf regression introduced by V8 7.3

This commit contains two fixes:
1. use instanceof instead of Object.getPrototypeOf, as checking an
   object prototype with Object.getPrototypeOf is slower
   than an instanceof check.
2. avoid parseInt(undefined, 10) to get NaN as it regressed.

PR-URL: https://github.com/nodejs/node/pull/28842
Fixes: https://github.com/nodejs/node/issues/28586
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Anto Aravinth <anto.aravinth.cse@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: do not unconditionally call `_read()` on `resume()`

`readable.resume()` calls `.read(0)`, which in turn previously set
`needReadable = true`, and so a subsequent `.read()` call would
call `_read()` even though enough data was already available.

This can lead to elevated memory usage, because calling `_read()`
when enough data is in the readable buffer means that backpressure
is not being honoured.

Fixes: https://github.com/nodejs/node/issues/26957

PR-URL: https://github.com/nodejs/node/pull/26965
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>benchmark,lib: change var to const

Refs: https://github.com/nodejs/node/pull/26679

PR-URL: https://github.com/nodejs/node/pull/26915
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Tobias Nießen <tniessen@tnie.de>
Reviewed-By: Refael Ackermann <refack@gmail.com>benchmark,doc,lib: capitalize more comments

PR-URL: https://github.com/nodejs/node/pull/26849
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Vse Mozhet Byt <vsemozhetbyt@gmail.com>doc,lib,test: capitalize comment sentences

This activates the eslint capitalize comment rule for comments
above 50 characters.

PR-URL: https://github.com/nodejs/node/pull/24996
Reviewed-By: Ujjwal Sharma <usharma1998@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>tools: capitalize sentences

This adds the `capitalized-comments` eslint rule to verify that
actual sentences use capital letters as starting letters. It ignores
special words and all lines below 62 characters.

PR-URL: https://github.com/nodejs/node/pull/24808
Reviewed-By: Sam Ruby <rubys@intertwingly.net>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Ujjwal Sharma <usharma1998@gmail.com>
Reviewed-By: Sakthipriyan Vairamani <thechargingvolcano@gmail.com>stream: fix readable behavior for highWaterMark === 0

Avoid trying to emit 'readable' due to the fact that
state.length is always >= state.highWaterMark if highWaterMark is 0.
Therefore upon .read(0) call (through .on('readable')) stream assumed
that it has enough data to emit 'readable' even though
state.length === 0 instead of issuing _read(). Which led to the TTY
not recognizing that someone is waiting for the input.

Fixes: https://github.com/nodejs/node/issues/20503
Refs: https://github.com/nodejs/node/pull/18372

PR-URL: https://github.com/nodejs/node/pull/21690
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>stream: always reset awaitDrain when emitting data

The complicated `awaitDrain` machinery can be made a bit
slimmer, and more correct, by just resetting the value
each time `stream.emit('data')` is called.

By resetting the value before emitting the data chunk, and
seeing whether any pipe destinations return `.write() === false`,
we always end up in a consistent state and don’t need to worry
about odd situations (like `dest.write(chunk)` emitting more data).

PR-URL: https://github.com/nodejs/node/pull/18516
Fixes: https://github.com/nodejs/node/issues/18484
Fixes: https://github.com/nodejs/node/issues/18512
Refs: https://github.com/nodejs/node/pull/18515
Reviewed-By: Anatoli Papirovski <apapirovski@mac.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Minwoo Jung <minwoo@nodesource.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>stream: improve Readable.read() performance

read() performance is improved most by switching from an array to
a linked list for storing buffered data. However, other changes that
also contribute include: making some hot functions inlinable, faster
read() argument checking, and misc code rearrangement to avoid
unnecessary code execution.

PR-URL: https://github.com/nodejs/node/pull/7077
Reviewed-By: Calvin Metcalf <calvin.metcalf@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>lib: reduce util.is*() usage

Many of the util.is*() methods used to check data types
simply compare against a single value or the result of
typeof. This commit replaces calls to these methods with
equivalent checks. This commit does not touch calls to the
more complex methods (isRegExp(), isDate(), etc.).

Fixes: https://github.com/iojs/io.js/issues/607
PR-URL: https://github.com/iojs/io.js/pull/647
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>src: Replace macros with util functionsstreams: Don't emit 'end' until read() past EOF

This prevents the following sort of thing from being confusing:

```javascript
stream.on('data', function() { console.error('got data'); });
stream.pause(); // stop reading

// turns out no data is available
stream.push(null);

// Hand the stream to someone else, who does stuff...
setTimeout(function() {
  // too late! 'end' is already emitted!
  stream.on('end', function() { console.error('got end'); });
});
```

With this change, the `end` event is not emitted until you call `read()`
*past* the EOF null.  So, a paused stream will not swallow the `end`
event and emit it before you `resume()` the stream.lib: macro-ify type checks

Increases the grep factor. Makes it easier to harmonize type checks
across the code base.stream: Simplify flowing, passive data listening

Closes #5860

In streams2, there is an "old mode" for compatibility.  Once switched
into this mode, there is no going back.

With this change, there is a "flowing mode" and a "paused mode".  If you
add a data listener, then this will start the flow of data.  However,
hitting the `pause()` method will switch *back* into a non-flowing mode,
where the `read()` method will pull data out.

Every time `read()` returns a data chunk, it also emits a `data` event.
In this way, a passive data listener can be added, and the stream passed
off to some other reader, for use with progress bars and the like.

There is no API change beyond this added flexibility.Merge remote-tracking branch 'ry/v0.10'

Conflicts:
	src/node.cc
	src/node_version.hMerge remote-tracking branch 'ry/v0.10'

Conflicts:
	src/node_version.hstream: Remove bufferSize option

Now that highWaterMark increases when there are large reads, this
greatly reduces the number of calls necessary to _read(size), assuming
that _read actually respects the size argument.stream: There is no _read cb, there is only push

This makes it so that `stream.push(chunk)` is the only way to signal the
end of reading, removing the confusing disparity between the
callback-style _read method, and the fact that most real-world streams
do not have a 1:1 corollation between the "please give me data" event,
and the actual arrival of a chunk of data.

It is still possible, of course, to implement a `CallbackReadable` on
top of this.  Simply provide a method like this as the callback:

    function readCallback(er, chunk) {
      if (er)
        stream.emit('error', er);
      else
        stream.push(chunk);
    }

However, *only* fs streams actually would behave in this way, so it
makes not a lot of sense to make TCP, TLS, HTTP, and all the rest have
to bend into this uncomfortable paradigm.stream: read(0) should not always trigger _read(n,cb)

This is causing the CryptoStreams to get into an awful state when
there is a tight loop calling connection.write(chunk) waiting for
a false return.

Because CryptoStreams use read(0) to cycle data, this was causing
the encrypted side to pull way too much data in from the cleartext
side, since the read(0) would make it always call _read.

The unfortunate side effect, fixed in the next patch, is that
CryptoStreams don't automatically cycle when the Socket drains.stream: Empty strings/buffers do not signal EOF any longerstreams: Support objects other than Buffers

We detect for non-string and non-buffer values in onread and
turn the stream into an "objectMode" stream.

If we are in "objectMode" mode then howMuchToRead will
always return 1, state.length will always have 1 appended
to it when there is a new item and fromList always takes
the first value from the list.

This means that for object streams, the n in read(n) is
ignored and read() will always return a single value

Fixed a bug with unpipe where the pipe would break because
the flowing state was not reset to false.

Fixed a bug with sync cb(null, null) in _read which would
forget to end the readable streamstream: Properly handle large reads from push-streams

Problem 1: If stream.push() triggers a 'readable' event, and the user
calls `read(n)` with some n > the highWaterMark, then the push() will
return false (indicating that they should not push any more), but no
future 'readable' event is coming (because we're above the
highWaterMark).

Solution: return true from push() when needReadable is set.

Problem 2: A read(n) for n != 0, after the stream had encountered an
EOF, would not trigger the 'end' event if the EOF was pushed in
synchronously by the _read() function.

Solution: Check for ended in stream.read() and schedule an end event if
the length now equals 0.

Fix #4585stream: Do not call endReadable on a non-empty stream

Say that a stream's current read queue has 101 bytes in it, and the
underlying resource has ended (ie, reached EOF).

If you do something like this:

    stream.read(100); // leave a byte behind
    stream.read(0); // read(0) for some reason

then the read(0) will get 0 from the howMuchToRead function.  Since the
stream was ended, this was incorrectly treating the 0 as a "there is no
more in the buffer", and emitting 'end' before that last byte was read.

Why have the read(0) in the first place?  We do this in some cases to
trigger the last few bytes of a net socket (such as a child process's
stdio pipes).  This was causing issues when piping a `git archive` job
to a file: the resulting tarball was incomplete, because it occasionally
was not getting the last chunk.Merge branch 'streams2'tools: update ESLint to v4.0.0

Update ESLint and configuration to version 4.0.0.

PR-URL: https://github.com/nodejs/node/pull/13645
Reviewed-By: Teddy Katz <teddy.katz@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: Sam Roberts <vieuxtech@gmail.com>
Reviewed-By: Alexey Orlenko <eaglexrlnk@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>Fix task when multiple progress.support auto sampling in progressive, which makes the incremental graphic elements uniformly distributed.Fix sampling in stream.Fix render twice.Fix #7625 (stream do not work in small data)Filer self update output end.SetData fix.Fix raw series process logic in pipeline.Support setData and getData in stream.Fix stream abnormal when setOption again.Merge pull request #7427 from 100pah/next

Nexttools: update ESLint to 7.0.0-alpha.2

Update ESLint to 7.0.0-alpha.2

PR-URL: https://github.com/nodejs/node/pull/31400
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>Make equirectangular reflections / refractions backwards compatible. (#19911)

* Remove Equirect Reflection/Refraction Mapping

* Reverted EquirectangularReflectionMapping and EquirectangularRefractionMapping removals.

* Added EquirectangularTexture and EquirectangularTextureLoader.

* WebGLCubeRenderTarget: Avoid using renderer.render() in fromEquirectangularTexture().

* WebGLBackground: Support EquirectangularTextures as background.

* Examples: Simplified webgl_materials_envmaps example.

* Fixed EquirectangularTextureLoader.d.ts

* Removed EquirectangularTextureLoader

* WebGLBackground: Fixed breaking when using Color as background.

* Examples: Fixed FBXLoader and LWOLoader.

* WebGLTextures: Moved cubeTexture code to its own class.

* WebGLCubeMaps: Handle CubeUVReflectionMapping and CubeUVRefractionMapping.

* WebGLCubeRenderTarget: Renamed isWebGLCubeTexture hack to isWebGLCubeRenderTargetTexture.

* Removed EquirectangularTexture

* WebGLCubeMaps: Simplified and fixed some breakage.

* Reverted more removals.

* WebGLRenderer: Check object.geometry before updating attributes.

* WebGLRenderer: Added getRenderList and setRenderList.

* WebGLBackground: Added WebGLCubeRenderTarget support back.

* Reverted comment removal.

* WebGLCubeRenderTarget: Avoid using mipmaps in fromEquirectangularTexture.

* WebGLCubeRenderTarget: Reverted generateMipmaps/migFilter/magFilter removal.

* WebGLCubeMaps: Added DataTexture support.

* Examples: Added more detail to sphere in webgl_materials_envmap.

* WebGLCubeRenderTarget: Improved LinearMipmapLinearFilter handling.

* WebGLCubeMaps: Added support for CompressedTextures.

Co-authored-by: WestLangley <WestLangley@users.noreply.github.com>Merge pull request #19882 from Mugen87/dev46

WebGLMaterials: Avoid undefined as maxMipLevel uniform value.Merge pull request #19504 from Mugen87/dev49

Core: More usage of let/const.Merge pull request #19304 from taphos/materials-helper

WebGLMaterials helperMerge pull request #19471 from Mugen87/dev45

Mesh/Line/Points: Fix copy().Merge pull request #19490 from Mugen87/dev49

Core: More let/const usage.Merge pull request #18041 from Mugen87/dev39

Mesh: Remove drawMode.Merge pull request #17649 from zeux/morph-relative

BufferGeometry: Implemented morphTargetsRelative Merge pull request #17828 from Mugen87/dev34

Mesh: Add drawMode warning in .raycast().Merge pull request #17249 from Mugen87/dev33

Core: Eagerly instantiate module scope variables.Merge pull request #17195 from Mugen87/dev31

Objects: Remove IIFEs.Merge pull request #17032 from Mugen87/dev17

Mesh: Add support for second set of uvs in raycast().Merge pull request #15985 from Mugen87/dev27

 Mesh: Added support for morph targets with BufferGeometry in raycast().Merge pull request #15613 from Mugen87/dev19

Mesh: Improve handling of material index.Merge pull request #14782 from 06wj/patch1

Add Triangle.getUV & The result of sprite.raycast add uvMerge pull request #14392 from Mugen87/dev14

Mesh: Fixed bugs in .raycast()Merge pull request #14227 from Mugen87/dev2

Mesh: Fix raycast() for BufferGeometry with multiple materialsMerge pull request #13906 from Mugen87/dev4

Mesh: Make faceIndex consistent for BufferGeometries in raycast()Merge pull request #13603 from Mugen87/dev11

Mesh: Remove redundant property .index in .raycast()Mesh: Clean up.Merge pull request #12192 from wenatuhs/dev

Fix bug: check if position is undefined before use position.countMerge pull request #11594 from 06wj/patch-raycast

Fix mesh raycast bug when has multi-materialClean up.Merge pull request #7773 from Immugio/raycast-check-uvs-length

THREE.Mesh.raycast - check uvs array length before accessingDeprecated MultiMaterial.Mesh: Fixed compile errors.Merge pull request #10390 from Mugen87/dev

Mesh: .raycast() now works with InterleavedBufferAttributeCleanup duplicate () and remove redundant checks - introduced by modularisation (#10035)

* BufferGeometry cleanup

* Line cleanup

* Mesh cleanup

* Points cleanup

* Skeleton cleanup

* SkinnedMesh cleanup

* Box3 cleanup

* Color cleanup

* Matrix3 cleanup

* EdgesGeometry cleanup

* WireframeGeometry Cleanup

* Materials cleanup

* BoxHelper cleanup

* FaceNormals Helper cleanup

* SkeletonHelper cleanup

* VertexNormalsHelper cleanup

* PropertyBindings cleanupModules (#9310)

* convert to ES modules

* rebuild

* move shaders back into glsl files

* reinstate polyfillsObject.assign()ed lights and objects.Merge pull request #7994 from Mugen87/dev

Removal of THREE.MeshFaceMaterial in examples, docs and coreMesh/Line/Points: raycast code clean up.Line/Mesh: raycast code clean up.Renamed isIntersection* to intersects*. See #7376.Merge branch 'dev'

Conflicts:
	build/three.js
	build/three.min.js
	src/core/Object3D.js
	src/renderers/WebGLRenderer.jsYAML: Preserve blank lines in comments (#8356)

* YAML: Fix ugly comments

* Add changelog

* Use common utilsFix unstable yaml print (#8355)
Bump Prettier dependency to 2.0.0fix: get rid of CRLF (#5494)
fix(yaml): update parsers (#5027)

- upgrade to `yaml@1.0.0-rc.8` and `yaml-unist-parser@1.0.0-rc.4`
- refactor some logic since the AST has slightly changed (ikatyang/yaml-unist-parser#82)
- unmatched aliases are now errors since it may introduce invalid AST from `yaml`
- rewrite the document separator (`...`/`---`) logic, this fixes some cases where it can use `---` but we printed `...`
- removed some unnecessary duplicate trailing newline
- trailing comments on `document` (`... #comment`) and `documentHead` (`--- #comment`) are preserved (i.e. they won't be moved somewhere)fix(yaml): support end comments (#4854)
feat: support YAML (#4563)

* feat: support YAML

* fix: do not indent sequence in mappingValue

* docs: add yaml to index.md

* fix: reduce `SyntaxError: Node#parse consumed no characters`

* chore: remove old-build and new-worker.js

* refactor

* refactor

* refactor

* refactor

* refactor

* refactor

* refactor

* refactor

* refactor

* refactor

* refactor

* refactor

* fix: no space after `<<`

* fix: add yaml to standalone test

* test: add tests

* fix: next empty line in flow collection

* fix: tabs are not allowed
http://yaml.org/spec/1.2/spec.html#space/indentation/

* fix: update parser

* feat: rewrite the mappingItem logic
* feat: indent sequence in mapping
* feat(doc): add ifBreak#groupId and group#id

* chore: fix node 4

* chore: add tools_yaml.svg

* chore: remove resolved TODO

* refactor: remove unnecessary workaround

* chore(worker): importScriptOnce

* chore(build): rename with babelPlugins

* make it rollup compatible

* feat: support singleQuote

* refactortools: update eslint to 0.24.0

PR-URL: https://github.com/nodejs/io.js/pull/2072
Reviewed-By: Yosuke Furukawa <yosuke.furukawa@gmail.com>
Reviewed-by: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Alex Kocharin <alex@kocharin.ru>Merge pull request #19033 from Mugen87/dev48

Examples: Clean up.Merge pull request #17403 from Mugen87/dev37

CompressedTextureLoader: Refactor parsing.ImageUtils.loadDDSTexture to examples/DDSLoader.Build 2.11.0Merge pull request #2630 from vnathalye:develop

Changed relative time translationnpm: upgrade to v2.1.18

PR-URL: https://github.com/iojs/io.js/pull/266
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>Merge pull request #2702 from ichernev:week-rework

Week reworkMerge pull request #2303 from brianwyantora:develop

Performance: improve parsing of moments from valid Date objectsMerge pull request #18958 from Mugen87/dev47

ColladaExporter: Honor normal maps.ColladaLoader: Clean up.Merge pull request #17291 from marekjedrzejewski/collada-empty-name-fix

Fix ColladaExporter empty namesMerge pull request #17284 from gkjohnson/patch-2

ColladaExporter: Add profile="THREEJS" to technique nodeMerge pull request #16727 from Mugen87/dev31

JSM: Added ColladaExporter to modularize.jsMerge pull request #16308 from linbingquan/clean-up

Examples: Clean upMerge pull request #15592 from donmccurdy/feat-jsm-exporters

JSM: Exporters: Create ES modules.Merge pull request #15657 from Mugen87/dev26

Examples: Clean upMerge pull request #15527 from gkjohnson/collada-exporter-warning

Add Collada Exporter warningMerge pull request #15469 from clintonman/colladaexport

ColladaExporter: Optimize material export and added exampleMerge pull request #14403 from gkjohnson/collada-exporter

Add ColladaExporterBuild 2.19.0Build 2.10.3Merge pull request #1965 from ichernev:support-24

Support 24:00:00.000 to mean next day, at midnight.Merge pull request #1140 from icambron/feature/invalid-moments

Invalid moment reworktools: update ESLint to 6.1.0

Update ESLint to 6.1.0

PR-URL: https://github.com/nodejs/node/pull/28793
Reviewed-By: Yongsheng Zhang <zyszys98@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Jiawen Geng <technicalcute@gmail.com>tools: update ESLint to 5.12.1

Update ESLint to 5.12.1

PR-URL: https://github.com/nodejs/node/pull/25573
Reviewed-By: Wyatt Preul <wpreul@gmail.com>
Reviewed-By: Masashi Hirano <shisama07@gmail.com>[locale] fi: fix ss not returning the number of seconds (#5595)
Build 2.27.0Merge pull request #1579 from icambron/camelCase

Camel case everywhereMerge pull request #226 from bleadof/master

The Finnish translationMerge branch 'master' of github.com:ecomfe/echartsMerge branch 'master' of github.com:ecomfe/echartsFix treemap visual encoding.compat calendar and timeline for ec3 normal emphasis.es6 module II (indent)Fix #6503 (compat marker data)Edge label position and compat style for graph.plain textStyle and enable rich.Build 2.19.4Build 2.18.0LightShadow: Renamed shadowOffset to shadowBias.Merge pull request #18915 from higharc/shadow-normal-offset

LightShadow: Add shadow map normal offset.Merge pull request #18627 from higharc/shadow-uniforms

WebGLRenderer: Optimize number of light shadow uniforms.Merge pull request #17074 from higharc/conserve-shadowmap-texture-slots

Conserve shadow map texture slotsMerge pull request #16581 from aardgoose/lhash

Simplify WebGLLights hash valueMerge pull request #16295 from mrdoob/lightprobe

LightProbe: Moved utility methods to examples.Merge pull request #16260 from WestLangley/dev-light_probe_color

LightProbe: modulate irradiance by probe colorMerge pull request #16223 from WestLangley/dev-probe_support

Added support for light probesMerge pull request #14962 from donmccurdy/feat-lights-physical-attenuation

Lights: Use inverse-square attenuation w/ distance=0 in physically-correct mode.Merge pull request #14588 from oguzeroglu/webgllights_string_concat

Removed inefficient string concats from WebGLLightsMerge pull request #13317 from mrdoob/webglrenderstates-cleanup

WebGLRenderStates: Moved count to WebGLLights.Merge pull request #13110 from Mugen87/dev7

WebGLRenderer: Enable nested render callsMerge pull request #13001 from WestLangley/dev-rect_area

RectAreaLight: light intensity is now light brightnessMerge pull request #12159 from Mugen87/dev3

Clean up some more linter warningsWebGLRenderer: Moved more lights code to WebGLLights.Merge pull request #18223 from Mugen87/dev29

SubdivisionModifier: Fix runtime error with empty uvs.Merge pull request #18065 from ieskudero/SubdivisionModifier-patch-1

Update SubdivisionModifier - use all uv channelsMerge pull request #16577 from Mugen87/dev32

JSM: Added module and TS files for modifiers.Merge pull request #14319 from Mugen87/dev12

SubdivisionModifier: Honor material indicesSubdivisionModifier clean up.SubdivisionModifier clean up.Merge pull request #7907 from centerionware/dev

UV Support on SubdivisionModifierMerge pull request #6863 from gero3/MDCSCleanup

 cleanup of files for MrDoob's code styleReverted console.* to THREE.* change. See #5791.Merge pull request #6345 from brason/semicolons

Add and remove semicolonsMerge pull request #6287 from JanWaller/dev

Use unified Log,Warn & Error handlers, rather than directly using console.error/warn/logMerge branch 'codestyle' of https://github.com/gero3/three.js into dev

Conflicts:
	examples/js/loaders/ColladaLoader.jsSubdivision Modifier: More formatting to mrdoob's code styleReplaces Catmull-Clark Algorithm with Loop Scheme for Subdivision Modifier

- This provides better results for subdivisions of triangles only
- Subdivision examples looks much better now
- Fixes #4455, #3663
- Known issues: doesnt handle UVs, sharp, and semi-sharp edges for nowMerge pull request #19932 from donmccurdy/feat-ktx2loader-zstd

Add ZSTDDecoder, add ZSTD support to KTX2Loader.Merge pull request #19916 from lexaknyazev/patch-1

Fix UASTC to BC7 target format selectionMerge pull request #19913 from Mugen87/dev51

Examples: Fix style and TS errors.Merge pull request #19846 from donmccurdy/bug-ktx2loader-uastc-ios

KTX2Loader: Fix transcode target choices for UASTC on iOS. Add BC7.Merge pull request #18490 from donmccurdy/feat-ktx2loader

KTX2Loadertools: update babel-eslint to 10.0.1

Update babel-eslint to 10.0.1.

PR-URL: https://github.com/nodejs/node/pull/26347
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Shingo Inoue <leko.noor@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>tools: update ESLint to 5.6.1

Update ESLint to 5.6.1.

PR-URL: https://github.com/nodejs/node/pull/23149
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>tools: update ESLint to 5.6.0

Update ESLint to 5.6.0.

PR-URL: https://github.com/nodejs/node/pull/22882
Reviewed-By: Vse Mozhet Byt <vsemozhetbyt@gmail.com>
Reviewed-By: George Adams <george.adams@uk.ibm.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>Merge branch 'master' into nextBump Prettier dependency to 1.15.0Add a new `trim` command to trim whitespaces in the current line (#4772)
Fix debug doc printer for literallinefix(javascript): ternary with `--use-tabs` (#3745)

* test: add test cases

* test: add test cases

* fix(javascript): ternary with `--use-tabs`

* chore: add istanbul ignore comment

* fix: remove unnecessary condition

* docs(commands): update `align`

* fix: do not transform the middle part

* refactor: markAsRoot

* fix: print tabs in sub-ternaries

* docs(commands): update

* test: add a cool test casefix(multiparser): respect 0-indent markdown-in-js (#3676)

* fix(multiparser): respect 0-indent markdown-in-js

* fix: use literalline for 0-indent

* test: add unexpected case

* fix: 0-indent

* test: add failing test

* refactor: simplify

* fix(doc): literallines respect `ind.root`

* docs: update commands

* fix: what a magic...Add `lint` script, run it on Travis, prettify source code (#1634)

* Add `lint` script with eslint-plugin-prettier, use it in `format:all`

See https://github.com/prettier/prettier/pull/1634#issuecomment-302945967

* Run `lint` script on Travis

* Run Prettier on its own source code

This was done with

    npm run format:allNew primitive to fill a line with as many doc parts as possible (#1120)

* Add new fill primitive and use it to wrap text in JSX

This adds a new `fill` primitive that can be used to fill lines with as much code as possible before moving to a new line with the same indentation.

It is used here layout JSX children. This gives us nicer wrapping for JSX elements containings lots of text interspersed with tags.

* Quick fix for jsx whitespace regressions

* Fix a couple more bugs

* Tidy up the `fill` algorithm

Attempt to make the algorithm a little more regular, and improve the naming of variables to make it a little easier to understand (I hope!).

* Small tidy up of JSX whitespace declarations

* Remove unnecessary code

It turns out that `children` is only used in the case when the element is printed on a single line, in which case all the types of JSX whitespaces behave the same, so we don't need to special case leading/trailing/solitary whitespace.

* A little more tidy up based on PR feedback

* Fix up tests after rebasing

* Make it explicit that we keep multiple consecutive spaces

* Add an explanatory comment

* Fix broken snapshot in master

* Ignore existing commands when deciding whether content will fit when using fill

* Fix a bug where children would get incorrectly filled onto a line

* Tidy up JSX whitespace namesFormat the codebase using the pre-1.0 release (#1194)
Add doc debug printing for line-suffix-boundary (#1158)
Refactored option to indent with tabs (#1026)

Refactored option to indent with tabsRun prettier on 0.17.0Print line-suffix in --debug-print-doc (#676)

I was trying to debug #620 and got confused that it didn't show `//comment1`. Turns out we just fail silently if we can't print a node type. I added support for `line-suffix` and throw if we encounter a node type that we can't print.Run prettier on 0.13.0 (#497)
Propagate breaks upwards automatically, introduce `breakParent`, and deprecate `multilineGroup` (#440)
Drop jsesc (#357)

Even though JSON.stringify is not 100% correct, this is only used for debugging and doesn't warrant adding a dependency for it.Run prettier on the codebase (#354)
Add debugging support for doc IR (#347)

This PR adds two things:

`--debug-print-doc` command that prints the formatted doc

```js
echo "<div>&lt;</div>" | ./bin/prettier.js --stdin --debug-print-doc
[
  groupConditional(
    group([
      group([ "<", "div", group([ indent(2, []), softline() ]), ">" ]),
      "&lt;",
      "</",
      "div",
      ">"
    ]),
    [
      group([
        group([ "<", "div", group([ indent(2, []), softline() ]), ">" ]),
        "&lt;",
        "</",
        "div",
        ">"
      ]),
      group([
        group([ "<", "div", group([ indent(2, []), softline() ]), ">" ]),
        indent(2, groupBreak([ hardline(), "&lt;" ])),
        hardline(),
        "</",
        "div",
        ">"
      ])
    ]
  ),
  ";",
  hardline()
];
```

The ability to view the IR in real time on the browser display:

![image](https://cloud.githubusercontent.com/assets/197597/22134741/4f172f20-de7e-11e6-84bc-5f813976dc19.png)

The way it works is pretty cool, we take the doc IR and print a valid JavaScript string out of it, that we then send to prettier in order to make it look good :)DRACOLoader: Reverted non-indexed geometry change.DRACOExporter: Clean up.Merge pull request #19220 from TejaSwaroopArukoti/dev

DRACOExporter: Fixed number of faces parameter.Merge pull request #16872 from Mugen87/dev32

Examples: Rename DracoExporter to DRACOExporter.Merge pull request #16751 from Mugen87/dev31

JSM: Added module and TS file for DRACOExporter.Merge pull request #16040 from tentone/DracoExporter

Google draco exporter (.drc)Merge pull request #18270 from Mugen87/dev29

Math: Rename to MathUtils.Merge pull request #18025 from Mugen87/dev39

WebGLRenderer: VR -> XR.Merge pull request #15975 from Mugen87/dev27

Examples: Clean upMerge pull request #15571 from maccesch/dev

deprecated renderTarget and forceClear from WebGLRenderer.render()Merge pull request #15500 from Oletus/cleanup-addressing-uniforms-in-examples

Always use strings for uniform names in examplesMerge pull request #15366 from mikepiecuch/fire_example

Fire and smoke exampleMerge pull request #16583 from Mugen87/dev33

Examples: Clean upMerge pull request #16502 from Mugen87/dev32

JSM: More modules and TS files for loaders.Merge pull request #13088 from dr0ps/autoLineEndings

git should handle the line endingsMerge pull request #11912 from Mugen87/assimp

AssimpLoader: RefactoringFixed AssimpLoader.Revert: Removed more material.skinning references.Removed more material.skinning references.Merge pull request #10259 from Virtulous/dev

A few fixesAssimpLoader: Reformating.Merge pull request #10255 from Virtulous/dev

Binary loader for Assimp filesMerge pull request #19036 from Mugen87/dev45

Global: Clean up.Merge pull request #17406 from Mugen87/dev29

DataTextureLoader: Refactor parsing.Merge pull request #16666 from WestLangley/dev_rgbe_loader

RGBELoader: support HalfFloatType outputMerge pull request #5624 from foo123/rgbeloader2

(three.js issue: #5552) add BinaryTextireLoader.js, RGBELoader.js (plus ...Merge pull request #12224 from Mugen87/dev

AMFLoader: Use childNodes instead of childrenMerge pull request #11730 from WestLangley/dev-loaders

Loaders: material.shading ==> material.flatShadingMerge pull request #11653 from Mugen87/amf

AMFLoader: Clean upAMFLoader: Clean up.Make AMF Loader preserve part names, issue #9214 (#9215)
chore(*): switch from JSHint/JSCS to ESLint

Thanks to @narretz for help in fixing style violations and to @gkalpak
for a very extensive review.

Closes #14952fix: make files in src/ jshint: eqeqeq compatible

Add exceptions to the rule in input, ngAria, and parse.
For input and ngAria, the exception is to prevent a breaking change in the radio directive.
A test for the input behavior has been added.
For parse, the exception covers non-strict expression comparison.fix(ngAria): Apply ARIA attrs correctly

BREAKING CHANGE: Where appropriate, ngAria now applies ARIA to custom controls only, not native inputs. Because of this, support for `aria-multiline` on textareas has been removed.

New support added for ngValue, ngChecked, and ngRequired, along with updated documentation.

Closes #13078
Closes #11374
Closes #11830

Closes #13483fix(ngAria): don't add tabindex to radio and checkbox inputs

Closes #12492
Closes #13095fix(ngAria): clean up tabindex usage

* Do not put tabindex on native controls using ng-model or ng-click
* Uses a single nodeBlacklist to limit which elements receive support

Closes #11500fix(ngAria): update `aria-valuemin/max` when `min/max` change

As a result of thi fix, `ngMin/Max` also set `aria-valuemin/max` on
"range"-shaped elements.

Fixes #11770

Closes #11774fix(ngAria): handle elements with role="checkbox/menuitemcheckbox"

Fixes #11317
Closes #11321fix(ngRepeat): fix reference to last collection value remaining across linkages

Ref #16776fix(ngRepeat): fix trackBy function being invoked with incorrect scope

Also fixes a leak of that scope across all further instances of the
repeated element.

Fixes #16776
Closes #16777chore(eslint): enable `quotes: ["error", "single"]`

The quotes rule had to be disabled for e2e tests generated from ngdoc
because dgeni templates use double quotes as string delimiters.

Since we can't have guarantees that dgeni template wrappers will follow
the same JS code style the Angular 1 repo uses, we should find a way
to enforce our ESLint setup only for the parts in this repo, perhaps
via prepending a generated `/* eslint-enable OUR_RULES */` pragma.

Closes #15011perf(ngRepeat): avoid duplicate jqLite wrappers

Internally, `$animate` already wraps elements passed through with
`jqLite`, so we can avoid needless duplication here.fix(ngRepeat): add support to iterate an object's properties even if it does not inherit from Object

Closes #9964fix(ngRepeat): do not sort object keys alphabetically

BREAKING CHANGE:

Previously, the order of items when using ngRepeat to iterate
over object properties was guaranteed to be consistent by sorting the
keys into alphabetic order.

Now, the order of the items is browser dependent based on the order returned
from iterating over the object using the `for key in obj` syntax.

It seems that browsers generally follow the strategy of providing
keys in the order in which they were defined, although there are exceptions
when keys are deleted and reinstated. See
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues

The best approach is to convert Objects into Arrays by a filter such as
https://github.com/petebacondarwin/angular-toArrayFilter
or some other mechanism, and then sort them manually in the order you need.

Closes #6210
Closes #10538fix(ngRepeat): support cyclic object references in error messages

Now that `minErr` can cope with objects that cannot be normally stringified
to JSON, just pass the error arguments straight through without trying to
stringify them first.

Closes #9838
Closes #10065
Closes #10085style(*): add rule disallowSpacesInAnonymousFunctionExpression beforeOpeningRoundBrace, including i18n generatordocs: add perf todo notes from #8515fix(ngRepeat): preserve original position of elements that are being animated away

During the recent refactoring a typo was made that broke code that detects if we are
already removed from the DOM (animation has completed).

Closes #8918
Closes #8994refactor(ngRepeat): specify explicit `false` for cloneNode deepClone parameter

This should provide a slight compat improvement for old versions of Opera, which did not treat the
`false` as the default value.

There is no test for this fix as Opera 11 is not a browser which runs on the CI servers.

Closes #8883
Closes #8885fix(ngRepeat): improve errors for duplicate items

-Log the value that had the duplicate key, as well as the key
The error that is thrown when items have duplicate track by keys can be
confusing because only the duplicate key is logged.  If the user didn't
provide that key themselves, they may not know what it is or what item
it corresponds to.revert: refactor($compile): automatically append end comment nodes to all element-transclusion templates

This reverts commit 0d608d041f37a659d8d8ba7a9b688e132587035d.

The commits caused more breaking changes at Google than initially expected and since its
benefit is small, so it's not worth keeping.refactor($compile): automatically append end comment nodes to all element-transclusion templates

Previously we would do it manually in all of our structural directives.

BREAKING CHANGE: element-transcluded directives now have an extra comment automatically appended to their cloned DOM

This comment is usually needed to keep track the end boundary in the event child directives modify the root node(s).
If not used for this purpose it can be safely ignored.refactor(ngRepeat): simplify previousNode boundary calculation

the previousNode was almost always correct except when we added a new block in which case incorrectly
assigned the cloned collection to the variable instead of the end comment node.chore(ngRepeat): improve inline commentschore(ngRepeat): fix typo in a commentperf(ngRepeat): simplify code and remove duplicate array.length access

minimal perf gain (~2ms)perf(ngRepeat): optimize marking of nodes that are being removed via an animationperf(ngRepeat): use no-proto objects for blockMapsstyle(ngRepeat): ws and indentation fixesperf(ngRepeat): move updateScope fn to factory and reuse it for all repeatersperf(ngRepeat): clone boundary comment nodes

http://jsperf.com/clone-vs-createcomment

most of the improvement comes from not reconcatinating the stringsstyle(ngRepeat): fix indentationrefactor: rename getBlockElements to more correct getBlockNodesrefactor(ngRepeat): name anonymous transclude callback for better debuggingfeat(ngRepeat): provide support for aliasing filtered repeater results as a scope member

ngRepeat can now alias the snapshot of the list of items evaluated after all filters have
been applied as a property on the scope. Prior to this fix, when a filter is applied on a
repeater, there is no way to trigger an event when the repeater renders zero results.

Closes #5919
Closes #8046
Closes #8282docs(*): fix its/it's grammar

Closes #7580fix($compile): set the iteration state before linking

This issue was introduced in b87e5fc0920915991122ba5dac87b619847b3568.
The state for each row has to be set up *before* linking.

The cloneFn (the function passed into $transclude) is called *before* actual linking and thus it is enough to update the state inside the cloneFn callback.style(ngRepeat): jshint was complaining about var namesfix(ngRepeat): ensure that the correct (transcluded) scope is usedfix($compile): update cloned elements if the template arrives after the cloning

If an element has a directive whose content is loaded using `templateUrl`,
and the element is cloned using a linking function before the template arrives,
the clone needs to be updated as well.

This also updates `ngIf` and `ngRepeat` to keep the connection to the clone
of a tranclude function, so that they know about the changes a directive with
`templateUrl` does to the element in the future.

Fixes to #4930.fix($compile): accessing controllers of transcluded directives from children

Additional API (backwards compatible)
- Injects `$transclude` (see directive controllers) as 5th argument to directive link functions.
- `$transclude` takes an optional scope as first parameter that overrides the
  bound scope.

Deprecations:
- `transclude` parameter of directive compile functions (use the new parameter for link functions instead).

Refactorings:
- Don't use comment node to temporarily store controllers
- `ngIf`, `ngRepeat`, ... now all use `$transclude`

Closes #4935.style: make jshint happyfeat(ngRepeat): use block separator comments

Issue: multi-elements ng-repeat (ng-repeat-start, ng-repeat-end) can contain elements with a trancluding directive. This directive changes content of the row (template) and ng-repeat does not work correctly (when removing/moving rows), because ng-repeat works with the original template (elements).

This changes ng-repeat behavior to traverse the DOM to find current elements everytime we are moving/removing rows (if the template has multiple elements).

Closes #3104fix(*): protect calls to hasOwnProperty in public API

Objects received from outside AngularJS may have had their `hasOwnProperty`
method overridden with something else. In cases where we can do this without
incurring a performance penalty we call directly on Object.prototype.hasOwnProperty
to ensure that we use the correct method.

Also, we have some internal hash objects, where the keys for the map are provided
from outside AngularJS. In such cases we either prevent `hasOwnProperty` from
being used as a key or provide some other way of preventing our objects from
having their `hasOwnProperty` overridden.

BREAKING CHANGE: Inputs with name equal to "hasOwnProperty" are not allowed inside
form or ngForm directives.

Before, inputs whose name was "hasOwnProperty" were quietly ignored and not added
to the scope.  Now a badname exception is thrown.

Using "hasOwnProperty" for an input name would be very unusual and bad practice.
Either do not include such an input in a `form` or `ngForm` directive or change
the name of the input.

Closes #3331fix(ngRepeat): correctly track elements even when the collection is initially undefined

Previously if the collection model was set to undefined on the first digest,
the repeater would get confused and not use the correct tracking function
for associating model with dom elements in the repeater.

Closes #4145
Closes #3964feat(ngAnimate): complete rewrite of animations

- ngAnimate directive is gone and was replaced with class based animations/transitions
- support for triggering animations on css class additions and removals
- done callback was added to all animation apis
- $animation and $animator where merged into a single $animate service with api:
  - $animate.enter(element, parent, after, done);
  - $animate.leave(element, done);
  - $animate.move(element, parent, after, done);
  - $animate.addClass(element, className, done);
  - $animate.removeClass(element, className, done);

BREAKING CHANGE: too many things changed, we'll write up a separate doc with migration instructionsfeat(ngRepeat): add $even and $odd props to iteratorfix(ngRepeat): handle iteration over identical obj values

Modifies default trackByIdFn to factor both key and value into hashKey
for non-array primitive (i.e. index not provided) values

Closes #2787
Closes #2806chore(minErr): replace ngError with minErrfix(ngRepeat): support growing over multi-element groupsfeat($compile): support multi-element directive

By appending  directive-start and directive-end to a
directive it is now possible to have the directive
act on a group of elements.

It is now possible to iterate over multiple elements like so:

<table>
  <tr ng-repeat-start="item in list">I get repeated</tr>
  <tr ng-repeat-end>I also get repeated</tr>
</table>feat(ngError): add error message compression and better error messages

- add toThrowNg matcherfix(ngRepeat): correctly iterate over array-like objects

Check if the object is array-like to iterate over it like it's done with arrays.

Closes #2546fix(ngRepeat): prevent initial duplicatesfeat(ngAnimate): add support for animationfeat(ngRepeat): add support for custom tracking of items

BREAKING CHANGE:

It is considered an error to have two items produce
the same track by key. (This was tolerated before.)test: fix uses of deprecated assert.fail with multiple args

PR-URL: https://github.com/nodejs/node/pull/23673
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Refael Ackermann <refack@gmail.com>async_hooks: replace concat w template literals

updated test/async-hooks/init-hooks.js

PR-URL: https://github.com/nodejs/node/pull/15968
Reviewed-By: Gibson Fahnestock <gibfahn@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>test: replace indexOf with includes

Refs: https://github.com/nodejs/node/issues/12586
PR-URL: https://github.com/nodejs/node/pull/14630
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Vse Mozhet Byt <vsemozhetbyt@gmail.com>
Reviewed-By: Tobias Nießen <tniessen@tnie.de>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Yuta Hiroto <hello@about-hiroppy.com>
Reviewed-By: Timothy Gu <timothygu99@gmail.com>
Reviewed-By: Alexey Orlenko <eaglexrlnk@gmail.com>async_hooks: fix default nextTick triggerAsyncId

In the case where triggerAsyncId is null it should default to the
current executionAsyncId. This worked but as a side-effect the resource
object was changed too.

This fix also makes the null check more strict. EmitInitS is not a
documented API, thus there is no reason to be flexible in its input.

Ref: https://github.com/nodejs/node/issues/13548#issuecomment-310985270
PR-URL: https://github.com/nodejs/node/pull/14026
Reviewed-By: Refael Ackermann <refack@gmail.com>test: improve async hooks test error messages

Improve error messages in the async hooks tests, mostly by removing
unhelpful `message` parameters for assertions.

PR-URL: https://github.com/nodejs/node/pull/13243
Reviewed-By: Kunal Pathak <kunal.pathak@microsoft.com>
Reviewed-By: Andreas Madsen <amwebdk@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Trevor Norris <trev.norris@gmail.com>test: adding tests for initHooks API

Async wrap providers tested:

- crypto.randomBytes
- crypto.pbkdf2
- fs event wrap
- fsreqwrap access
- fsreqwrap readFile
- getaddrinforeq wrap
- getnameinforeq wrap
- pipe connect wrap
- query wrap
- pipewrap
- processwrap
- shutdown wrap
- tcpwrap
- udpwrap
- send wrap
- detailed signal wrap
- statwatcher
- timerwrap via setTimeout
- timerwrap via setInterval
- for Immediate
- http parser request
- http parser response
- connection via ssl server
- tls wrap
- write wrap
- ttywrap via readstream
- ttywrap via wriream
- zctx via zlib binding deflate

Embedder API:

-  async-event tests
  - one test looks at the happy paths
  - another ensures that in cases of events emitted in an order that
  doesn't make sense, the order is enforced by async hooks throwing a
  meaningful error
  - embedder enforcement tests are split up since async hook stack
  corruption now the process
  - therefore we launch a child and check for error output of the offending code

Additional tests:

- tests that show that we can enable/disable hooks inside their lifetime
events
- tests that verify the graph of resources triggering the creation of
other resources

Test Helpers:

- init-hooks:
  - returns one collector instance
  - when created an async hook is created and the lifetime events are
  registered to call the appropriate collector functions
  - the collector also exposes `enable` and `disable` functions which call
  through to the async hook

- hook checks:
  - checks invocations of life time hooks against the actual invocations
  that were collected
  - in some cases like `destroy` a min/max range of invocations can be
  supplied since in these cases the exact number is non-deterministic

- verify graph:
  - verifies the triggerIds of specific async resources are as expected,
  i.e. the creation of resources was triggered by the resource we expect
  - includes a printGraph function to generate easily readable test
  input for verify graph
  - both functions prune TickObjects to create less brittle and easier
  to understand tests

PR-URL: https://github.com/nodejs/node/pull/12892
Ref: https://github.com/nodejs/node/pull/11883
Ref: https://github.com/nodejs/node/pull/8531
Reviewed-By: Andreas Madsen <amwebdk@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Sam Roberts <vieuxtech@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>Merge pull request #19499 from Mugen87/dev49

Core: More let/const usage.Merge pull request #13428 from WJsjtu/dev1

DirectGeometry: clone bounding volumes in fromGeometry methodMerge pull request #14711 from Mugen87/dev2

BufferGeometry: Support name of morph targets in .fromGeometry()Merge pull request #14257 from paulmasson/patch-1

DirectGeometry: Update error test for faceless geometriesMerge pull request #14105 from paulmasson/patch-4

Add error message for case not handled in DirectGeometrySimplified DirectGeometry.DirectGeometry: Clean up.Removed tangents code. See #7094.DirectGeometry: Added computeGroups. Fixed webgl_objects_update example.WebGLRenderer: Implemented MeshFaceMaterial/MultiMaterial.DirectGeometry: Create morphTargets array only when required.WebGLRenderer: Morph (vertex)normals working again.Merge pull request #6721 from WestLangley/dev-tangents

Added support for tangents and uvs2 to BufferGeometry and DirectGeometryDirectGeometry: material is no longer used.Renamed DynamicGeometry to DirectGeometry.WebGLRenderer: Rescuing MorphTargets. Work in Progress...DynamicGeometry: Copy morph data.BufferGeometry.setFromObject(): Support Skinning.Updated cloth example to DynamicGeometry.Added DynamicGeometry. See #6377.Merge pull request #5824 from zz85/patch-1

Optimize TessellateModifier.js slightlySimplified TessellateModifier.GeometryUtils.explode to ExplodeModifier and GeometryUtils.tessellate to TessellateModifier.Merge pull request #16661 from Mugen87/dev30

JSM: Added more modules and TS files.Updated RGBELoader module.Merge pull request #16510 from Mugen87/dev30

JSM: More modules and TS files for loaders.remove --stdin (#7668)
Style: enable `dot-notation` (#7323)
revert: `--only-changed` argument (#6594)
Add --only-changed flag to CLI (#5910)
Add --check option (#5629)
Implement prettier.getFileInfo() method and --file-info CLI option (#4341)

* Implement prettier.getFileInfo() method and --file-info CLI option

* Add empty line between functions in index.js

* Support --plugin-search-dirs / pluginSearchDirs() in --file-info / getFileInfo()

* Address review comments by @ikatyangfeat: support external options (#3775)

* refactor: wrap

* refactor: replace

* refactor: replace

* refactor: replace

* refactor: extract

* refactor: logger

* refactor

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* feat(support): add `showInternal` option

* refactor: use internal

* refactor

* refactor: extract

* refactor: extract

* refactor

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: reorder

* refactor: remove unnecessary

* refactor: reorder

* refactor: move

* refactor

* refactor

* refactor

* refactor: remove unnecessary

* feat: external options from CLI

* refactor: push/pop plugins

* feat: external options from config file

* refactor: remove unnecessary

* refactor

* refactor

* refactor

* fix: use `json-stable-stringify`

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: move

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: extract

* refactor: move

* refactor: extract

* docs: add comments

* refactor: sort

* refactor: sort

* refactor: rename

* refactor: remove unnecessary

* style: remove trailing whitespacerefactor(options): use supportOptions to generate CLI options (#3622)

* refactor(cli-constant): use supportOptions

* refactor(options): use supportOptions

* refactor(cli-util): use supportOptions

* fix: do not infer parser in multiparser

* chore: remove unnecessary package

* chore: trigger another travis build

* test: add kebab-case test to ensure no regression

* test: update snapshotsMake all CLI logging go through a logger (#3515)

* Make all CLI logging go through a logger

* Add --loglevel docs

* Change default loglevel to log

* Update snapshots

* Switch to YAML eslint filesImplement getSupportInfo() and use it for inference (#3033)

* Implement getSupportInfo() and use it for inference

* Add comment with source of languages.yml

* Fix build, pin semver

* Simplify test snapshots

* Remove stray 'type' property

* Fix parser being overwritten

* Don't infer unreleased parser from extension

* Add CLI and docs for support infofeat(cli): add `--loglevel` option (#2992)

* feat(cli): add `--loglevel` option

* fix: handle error from invalid option

* fix: choice value and shouldLog logic

* test: fix test cases

* fix: change log style

* test: truncate snapshots

* test: reduce duplicate code

* test: use patterns instead of snapshots

* test: fix regexfix(cli): validate options for every `config-precedence` (#2894)

* fix(cli): validate options for every `config-precedence`

* refactor: use camelcase

* refactor: reduce duplicate code

* refactor: rename function

* refactor: rename parameterfeat: support detailed `--help` (#2847)

* feat: support detailed --help

* refactor: put alias first, separate with comma

* feat: support detailed --help for --no-option

* docs: add missing type

* docs: remove `This requires node 8 or a transform`

* docs: remove config-precedence's choice descriptions in option.description

* docs: replace `option-name` with `flag`

* docs: update docs for `choices`

* docs: update `help` description

* docs: update error message

* docs: replace `undocumented` with empty string

* refactor: extract `getOptionDefaultValue`

* refactor: dynamically generate `defaults to ...`

* refactor: extract `getOptionWithLevenSuggestion`

* refactor: extract `createChoiceUsages`

* refactor: remove `optionTitleName`

* test: add `--help` tests for all options

* fix: handle `--help --help`

* feat: support `--help <alias>`

* refactor: use `flattenArray`

* feat: handle `--help <unknown>`

* docs: add description for `semi`, `color` and `bracket-spacing`

* fix: remove unnecessary option in `--help`Merge pull request #2767 from ikatyang/refactor/cli

refactor(cli): centralize optionsrefactor(cli): separate files and make it pure as possible (#2730)

* refactor(bin): resolveConfig

* refactor(bin): getOptionsForFile

* refactor(bin): remove `mapSeries`

* refactor: move content from bin to src/cli

* refactor: wrap content with function

* refactor: move constants to another file

* refactor: move utils to another file

* refactor: move functions

* refactor: extract functions

* refactor: remove unnecessary variable

* refactor: move `src/cli` to `src` with prefix `cli`

* refactor: use template literal

* refactor: remove unnecessary variable

* refactor: extract `listDifferent`

* refactor: extract `format`

* refactor: change error message `Invalid configuration:`

* refactor: bind args with argv

* refactor: extract `getOptionsForFile`

* refactor: extract `formatStdin`

* refactor: extract `eachFilename`

* refactor: extract `formatFiles`

* refactor: remove unnecessary export

* refactor: use `globby.sync()`

* refactor: add `runPrettier.sync()` helper

* refactor: fix linting

* refactor: mock `process.argv`

* chore: use `--forceExit` to avoid process hanging

* refactor: mock `get-stream`

* refactor: remove unnecessary stuff

* refactor: fix linting

* refactor: wrap `run` with `try..catch.finally`

* refactor: restore `process.exitCode` after testingstream: pipeline should only destroy un-finished streams

This PR logically reverts https://github.com/nodejs/node/pull/31940
which has caused lots of unnecessary breakage in the ecosystem.

This PR also aligns better with the actual documented behavior:

`stream.pipeline()` will call `stream.destroy(err)` on all streams
except:
  * `Readable` streams which have emitted `'end'` or `'close'`.
  * `Writable` streams which have emitted `'finish'` or `'close'`.

The behavior introduced in https://github.com/nodejs/node/pull/31940
was much more aggressive in terms of destroying streams. This was
good for avoiding potential resources leaks however breaks some
common assumputions in legacy streams.

Furthermore, it makes the code simpler and removes some hacks.

Fixes: https://github.com/nodejs/node/issues/32954
Fixes: https://github.com/nodejs/node/issues/32955

PR-URL: https://github.com/nodejs/node/pull/32968
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Mathias Buus <mathiasbuus@gmail.com>stream: complete pipeline with stdio

stdio (stderr & stdout) should for compatibility
reasons not be closed/end():ed. However, this
causes pipeline with a stdio destination to
never finish. This commit fixes this issue at
a performance cost.

Refs: https://github.com/nodejs/node/issues/7606

Fixes: https://github.com/nodejs/node/issues/32363

PR-URL: https://github.com/nodejs/node/pull/32373
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>stream: fix pipeline with dest in objectMode

pipeline did not support destination with generator
that does not return strings or buffers.

PR-URL: https://github.com/nodejs/node/pull/32414
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>stream: do not swallow errors with async iterators and pipeline

Before this patch, pipeline() could swallow errors by pre-emptively
producing a ERR_STREAM_PREMATURE_CLOSE that was not really helpful
to the user.

Co-Authored-By: Robert Nagy <ronagy@icloud.com>

PR-URL: https://github.com/nodejs/node/pull/32051
Reviewed-By: Robert Nagy <ronagy@icloud.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>stream: don't destroy final readable stream in pipeline

If the last stream in a pipeline is still usable/readable
don't destroy it to allow further composition.

Fixes: https://github.com/nodejs/node/issues/32105

PR-URL: https://github.com/nodejs/node/pull/32110
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>stream: add comments to pipeline implementation

Fixes: https://github.com/nodejs/node/issues/32039

PR-URL: https://github.com/nodejs/node/pull/32042
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>stream: fix broken pipeline error propagation

If the destination was an async function any
error thrown from that function would be swallowed.

PR-URL: https://github.com/nodejs/node/pull/31835
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>stream: support passing generator functions into pipeline()

PR-URL: https://github.com/nodejs/node/pull/31223
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: make all streams error in a pipeline

This changes makes all stream in a pipeline emit 'error' in
case of an abnormal termination of the pipeline. If the last stream
is currently being async iterated, this change will make the iteration
reject accordingly.

See: https://github.com/nodejs/node/pull/30861
Fixes: https://github.com/nodejs/node/issues/28194

PR-URL: https://github.com/nodejs/node/pull/30869
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: add pipeline and finished

PR-URL: https://github.com/nodejs/node/pull/19828
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>Merge pull request #19682 from gero3/usecorrectdocumentincontrols

ownerDocument should be used to get the document.Merge pull request #18348 from sciecode/dev-orbit-buttons

OrbitControls: Improve mouse customizable optionsMerge pull request #16961 from sciecode/dev-orbit2

OrbitControls: refactoringMerge pull request #15620 from greggman/orbitcontrols-focus-iframe-issue

Fix for OrbitControls not allowing keyboard input in iframeMerge pull request #15140 from leshkovichpvl/orbital-control/custom-pan-keys

OrbitControls: support panning with left mouse + shift keyMerge pull request #13972 from rkirsling/orbitcontrols-ctrldrag

OrbitControls: Support Ctrl-drag as right-drag alternative.Merge pull request #11174 from WestLangley/dev-orbit

OrbitControls: clean upRemove mouseout handlers from OrbitControls (#8832)
OrbitControls: Clean up.Merge pull request #7584 from WestLangley/dev-orbit_refactor

Refactor OrbitControlsMerge pull request #7544 from WestLangley/dev-orbit2

OrbitControls: Reimplemented simpler versionMerge pull request #7540 from WestLangley/dev-orbit

OrbitControls: Restore mouseout listenerRe-reverted OrbitControls. See c4940af2e6f7f20d8c6ade45710812c9665e7ee1.Merge pull request #7434 from mikaelgramont/orbitcontrols-mouseout

OrbitControls: adding a mouseout listener which does exactly the same…OrbitControls: Reverted to simpler version. Sorry @dubejf.
TODO: Reimplement 5a06da2ae9fb69176bcf18d743fb775e421b6055 and 45908e748d11b2c16f9a7017f7b7ebd007c0e348Merge branch 'dev' of https://github.com/mrdoob/three.js into devMerge pull request #6888 from dubejf/orb

Extract OrbitConstraint from OrbitControlsMerge pull request #5583 from satori99/orbitcam-fix

OrbitControls minor fixes.Merge pull request #5260 from yangchristian/master

Make OrbitControls mouse buttons configurableMerge branch 'orbit_controls_mouse_outside_window' of https://github.com/lpsinger/three.js into devMerge remote-tracking branch 'jasongrout/orbit-events' into devOrbitControls: Improved memory management. Minor cleanup.OrbitControls: Code clean up and addressed concerns raised in #3989.Merge branch 'master' of https://github.com/erich666/three.js into devEditor: Trying OrbitControls instead.
TrackballControls can be a bit of a pain...OrbitControls: Added pan with mouse and other improvements.Moving *Controls to examples/js

The reasoning is because I see a lot of people asking for tweaks so the control X works on their project.
The problem is that they can't just tweak the code because the controls is inside the lib.
By having them outside they should be able to guess they can customise the file for their project.

And yes, it also removes some bloat from the lib.Merge remote-tracking branch 'alteredq/dev' into devImproved OrbitControls and added example.Merge remote-tracking branch 'qiao/dev' into devJSM: Regenerated jsm files.Merge pull request #15367 from jbaicoianu/mtlloader-emissive

MTLLoader support for emissive / emissiveMapMerge pull request #14822 from WestLangley/dev-mtlloader_alphamap

MTLLoader: added support for alphaMapMerge pull request #13685 from eastpiger/eastpiger-patch-MTLLoader-equalizeTransparency

fix wrong parser behavior to Tr option with parameter invertTrProperty in MTLLoader.jsMerge pull request #12862 from eastpiger/eastpiger-patch-MTLLoader-equalizeTransparency

add TrOneIsOpaque option to MTLLoaderMerge pull request #11827 from edsilv/norm

added support for norm extension to MTLLoaderRemoved unused EventDispatcher from loaders and clean up.DRYer texture creation for different map types (#9336)

* DRYer texture creation for different map types

Noticed there was a fair bit of repetition in each map line case. This pulls the case logic out into a reusable function

This also adds support for texture parameters for specular maps as a result. (Expands on #9311 and #9308)

* Change style of function declarationMTLLoader: Support for texture parameters (#9311)

* MTLLoader: Support for texture parameters

 -s u v w for scale (w is ignored)
 -o u v w for offset (w is ignored)
 -bm s for bumpmap scale

* Fix positional argument to get bumpmap scale

* Trim texture url to prevent trailing spaces

* Fix calls to getTextureParams (pass material parameters)

* Add missing 'var'sMTL Loader support for map_Ks (#9308)

* MTL Loader support for map_Ks

* removed amature console logMTLLoader improvements (#8689)

* MTLLoader: Deprecate setBaseUrl in favor or better named setTexturePath.
Make sure MaterialCreator.baseUrl is not undefined if no path/texture path is set.

* MTLLoader: Automatically resolve texture base path from .mtl source URL if not explicitly set with setPath or setTexturePath.
The URL parameter to .parse(text, url) is passed in if you use .load(). For external use it is optional and preserves earlier behavior if not passed in.

* MTLLoader: Use single quotes consistently. Make params object property setting easier to read.

* MTLLoader: Don't overwrite already found diffuse texture like is done with bump map. This might change behavior for bad materials that define 'map_kd' multiple times.

* MTLLoader: Remaining double quotes to single ticks, also in documentation.

* MTLLoader: Remove auto resolving base path from .mtl source URL.
Add documentation to load and other important functions.
Remove now redundant call to .setBaseUrl in obj/mtl loader example. setPath is enough if the .mtl and textures have the same base path (documented).

* MTLLoader: Dont break parsed texture references that are already absolute URLs.

* MTLLoader: Fix doc typos.

* MTLLoader: Move utility function inside the function that uses it.

* MTLLoader: Use case insensitive regexp instead for abs URL checks.Clean up.MTLLoader: Added Tr support. Removed invertTransparency option. See #7520Merge pull request #7431 from jensarps/ignore-empty-mtl-entries

Ignore empty entries in MTL filesMerge pull request #5990 from tsone/obj-mtl-bump-map-support

MTLLoader:  Support for loading bump mapsMerge pull request #5809 from bhouston/remove_material_ambient

Remove material.ambient, no need for a secondary surface color just for ambient lightmerget upstreamMoved MTLLoader.MaterialCreator.loadTexture to inside the prototype definition.Merge branch 'master' into devRemoved SceneUtils.traverseHierarchy and SceneUtils.showHierarchy. Added object.traverse.
Is not exactly the same beaviour. object.traverse also applied the callback to object.
But I think it's better like this, because now we can do object.traverse( function ( node ) { node.visible = false } ) and it will also take care of the parent. However, if this creates any problem we can revert the behaviour.
I also prefer this behaviour because the code is simpler/cleaner :PMerge remote-tracking branch 'mrdoob/dev'Merge pull request #4599 from eternalharvest:feature/era_names

[feature] Add era support for en,ja (closes #4591)Merge pull request #4131 from mikeparas:mismatch-weekday

[bugfix] Fix day-of-week validation, fixes #4112Merge pull request #3383 from ben-ng:develop

[bugfix] toJSON: Fix isValid so that toJSON works after a moment is frozenMerge pull request #3045 from maggiepint:parsingFlags

Expose parsed date parts. Invalid date if 'a' token parsed but no date parts parsed.Merge pull request #2456 from ichernev:fix-str-weekday-parse-check

Mark moment as invalid if bad string weekday repr is parsed, fixes #2423tools: update ESLint to 4.19.1

A few bug fixes result in more stringent linting rules.

PR-URL: https://github.com/nodejs/node/pull/19528
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Daniel Bevenius <daniel.bevenius@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>fs: reimplement read and write streams using stream.construct

Refs: #23133

PR-URL: https://github.com/nodejs/node/pull/29656
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>fs: replace checkPosition with validateInteger

PR-URL: https://github.com/nodejs/node/pull/33277
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Yongsheng Zhang <zyszys98@gmail.com>fs: fix WriteStream autoClose order

WriteStream autoClose was implemented by manually
calling .destroy() instead of using autoDestroy
and callback. This caused some invariants related
to order of events to be broken.

Fixes: https://github.com/nodejs/node/issues/31776

PR-URL: https://github.com/nodejs/node/pull/31790
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>fs: change streams to always emit close by default

Previously due to compat reasons 'close' was only emitted if no 'error'.
This removes the compat behavior in order to properly follow expected
streams behavior.

PR-URL: https://github.com/nodejs/node/pull/31408
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: enable autoDestroy by default

PR-URL: https://github.com/nodejs/node/pull/30623
Refs: https://github.com/nodejs/node/issues/30621
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Rich Trott <rtrott@gmail.com>fs: allow overriding fs for streams

Allow overriding open, write, and close when using createReadStream()
and createWriteStream().

PR-URL: https://github.com/nodejs/node/pull/29083
Refs: https://github.com/nodejs/node/issues/29050
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Rich Trott <rtrott@gmail.com>fs: synchronize close with other I/O for streams

Part of the flakiness in the
parallel/test-readline-async-iterators-destroy test comes from
fs streams starting `_read()` and `_destroy()` without waiting
for the other to finish, which can lead to the `fs.read()` call
resulting in `EBADF` if timing is bad.

Fix this by synchronizing write and read operations with `close()`.

Refs: https://github.com/nodejs/node/issues/30660

PR-URL: https://github.com/nodejs/node/pull/30837
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>fs: add runtime deprecate for file stream open()

WriteStream.open() and ReadStream.open() are undocumented internal
APIs that do not make sense to use in userland. File streams should
always be opened through their corresponding factory methods
(fs.createWriteStream() and fs.createReadStream()) or by passing a file
descriptor in options.

PR-URL: https://github.com/nodejs/node/pull/29061
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Reviewed-By: João Reis <reis@janeasystems.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>fs: remove unnecessary argument check

Writable already assures that only Buffer's are passed to _write. Also
this is not the "correct" way to handle errors inside _write.

PR-URL: https://github.com/nodejs/node/pull/29043
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>fs: allow passing true to emitClose option

Allow passing true for emitClose option for fs
streams.

Fixes: https://github.com/nodejs/node/issues/29177

PR-URL: https://github.com/nodejs/node/pull/29212
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>fs: harden validation of start option in createWriteStream

PR-URL: https://github.com/nodejs/node/pull/25579
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>url: provide pathToFileURL and fileURLToPath

PR-URL: https://github.com/nodejs/node/pull/22506
Reviewed-By: John-David Dalton <john.david.dalton@gmail.com>
Reviewed-By: Tiancheng "Timothy" Gu <timothygu99@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Bradley Farias <bradley.meck@gmail.com>
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>
Reviewed-By: Gus Caplan <me@gus.host>fs: refactor fs module

PR-URL: https://github.com/nodejs/node/pull/20764
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>tools: update ESLint to 7.0.0-alpha.1

Update ESLint to 7.0.0-alpha.1

PR-URL: https://github.com/nodejs/node/pull/31400
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>tools: update to ESLint 4.12.0

PR-URL: https://github.com/nodejs/node/pull/16948
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>tools: update to ESLint 4.3.0

PR-URL: https://github.com/nodejs/node/pull/14417
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Teddy Katz <teddy.katz@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>
Reviewed-By: Refael Ackermann <refack@gmail.com>tools: update ESLint to 3.4.0

PR-URL: https://github.com/nodejs/node/pull/8296
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Roman Reiss <me@silverwind.io>Merge pull request #19983 from fernandojsg/fixhand

Fix bug when updating joints without requesting a hand in WebXRMerge pull request #19970 from DefinitelyMaybe/hopefully-last-const's

Core: Move some variables from let to const.XRHandOculusMeshModel: Removed hardcoded fbx folder.Merge pull request #19936 from fernandojsg/hand_mesh

WebXR hand mesh and profiles updatedMerge pull request #19929 from Mugen87/dev46

WebXRController: Fix linter warnings.Merge pull request #19922 from fernandojsg/handtracking

Add experimental WebXR Handtracking API supportMerge pull request #19099 from Mugen87/dev43

WebXRManager: Introduce WebXRController.RoughnessMipmapper: Clean up.RoughnessMipmapper: Removed temporal Scene.Merge pull request #18447 from Mugen87/dev11

PMREMGenerator: Fix viewport/scissor settings.Merge pull request #18419 from elalish/restore

Restore renderer stateMerge pull request #18110 from elalish/mipmapRoughness

Adding RoughnessMipmapperpolicy: add startup benchmark and make SRI lazier

PR-URL: https://github.com/nodejs/node/pull/29527
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>tools: enable no-else-return lint rule

Refs: https://github.com/nodejs/node/pull/32644
Refs: https://github.com/nodejs/node/pull/32662

PR-URL: https://github.com/nodejs/node/pull/32667
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>lib: use let instead of var

use let instead of var for lib/internal/policy/manifest.js
PR-URL: https://github.com/nodejs/node/pull/30424
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Gireesh Punathil <gpunathi@in.ibm.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>policy: minor perf opts and cleanup

PR-URL: https://github.com/nodejs/node/pull/29322
Reviewed-By: James M Snell <jasnell@gmail.com>policy: add dependencies map for resources

Adds a "dependencies" field to resources in policy manifest files.
In order to ease development and testing while using manifests,
wildcard values for both "dependencies" and "integrity" have been
added using the boolean value "true" in the policy manifest.

PR-URL: https://github.com/nodejs/node/pull/28767
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Jan Krems <jan.krems@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>lib: refactor policy code for readability

Simplify a few particularly quirky bits of code, and add
whitespace for readability.

PR-URL: https://github.com/nodejs/node/pull/25629
Reviewed-By: Denys Otrishko <shishugi@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Gus Caplan <me@gus.host>
Reviewed-By: Anto Aravinth <anto.aravinth.cse@gmail.com>
Reviewed-By: Sakthipriyan Vairamani <thechargingvolcano@gmail.com>policy: manifest with subresource integrity checks

This enables code loaded via the module system to be checked for
integrity to ensure the code loaded matches expectations.

PR-URL: https://github.com/nodejs/node/pull/23834
Reviewed-By: Guy Bedford <guybedford@gmail.com>
Reviewed-By: Vladimir de Turckheim <vlad2t@hotmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>Merge pull request #16370 from sciecode/dev7

LWOLoader: v1.1.1 & updated example.Merge pull request #16664 from Mugen87/dev32

JSM: Added module and TS file for LWOLoader.Merge pull request #16117 from sciecode/dev2

LWOLoader: clean upMerge pull request #16011 from looeee/lwo_loader

Add LWO3 loader and exampleMerge pull request #18881 from Mugen87/dev41

Upgrade dev dependencies.Merge pull request #18799 from LeonYuanYao/BufferGeometry-Compression-Example-Improvements

BufferGeometry compression example improved and codes optimizedMerge pull request #18615 from Mugen87/dev42

Examples: Clean up.Merge pull request #18605 from Mugen87/dev11

Examples: Clean up.Merge pull request #18208 from LeonYuanYao/geometry-compression-example

Geometry attributes compression exampleMerge pull request #17397 from Mugen87/dev37

Examples: Inherit from Loader III.Merge pull request #11717 from Mugen87/dev2

TGALoader: RefactoringMerge pull request #5463 from vincent/dev.missingloadmanagers

Adds missing LoadingManager in some loadersTGALoader code clean up.Moved ImageUtils.loadTGATexture to examples/TGALoader.Fix string methods to handle empty values (#4442)

* Enable strings category methods tests

* Ensure escape, pad, padEnd, padStart, trim, trimEnd, trimStart, unescape return an empty string for falsey values

* Coerce value to string using toString in truncate, capitalize and case methods

* Ensure createCaseFirst returns an empty string for falsey valuesAdjust spacing in template string expressions.Remove coercion method use.Remove semicolons.Apply more let/const transforms.Apply template string transform.Modularize master branch.Enable `unicorn/prefer-set-has` (#7990)
Merge with masterMerge branch 'next' of github.com:prettier/prettier into next

* 'next' of github.com:prettier/prettier:
  Optimize some usage of `Array#filter` (#6996)
  Update `jest` to v24 (#6954)
  Replace `trim{Left,Right}` with `trim{Start,End}` (#6994)
  Set `trailingComma` default value to `es5` (#6963)
  Fix `new` usage for builtin objects (#6968)
  Replace `indexOf` with `includes` (#6967)
  fix: tests for empty type parameters in TS (#6960)
  Fix MDX html parsing errors (#6949)
  fix: issue #6813 (Zero-based lists are broken) (#6852)
  Style: use async functions (#6935)
  Disable trailingComma for Angular internal parser (#6912)
  Update `snapshot-diff` to v0.6.1 (#6955)
  Update build scripts to target Node.js 10 (#6908)fix(markdown): respect blank line between block htmls (#4609)

Fixes #4605 

The AST here is actually two `html`s and it did follow the [CommonMark spec](https://spec.commonmark.org/0.28/#html-blocks), so I ended up with respecting the blank line between block `html`s.feat(markdown): support top-level `prettier-ignore-start/end` (#4202)

* test: add tests

* feat(markdown): support top-level `prettier-ignore-start/end`

* docs(ignore): add range ignorefeat: support markdown (#2943)

* feat(markdown): inital implementation

* feat(markdown): support strong

* fix: add missing default value

* feat(markdown): support inlineCode

* feat: support delete

* feat: support link

* feat: support image

* feat: support blockquote

* feat: support heading

* feat: support code

* feat: support yaml

* feat: support html

* feat: support list

* feat: support thematicBreak

* feat: support table

* feat: support linkReference

* feat: support imageReference

* feat: support definition

* feat: support footnote

* feat: support footnoteReference

* feat: support footnoteDefinition

* test(cli): update snapshots

* refactor: extract SINGLE_LINE_NODE_TYPES

* refactor: printChildren

* fix: correct newlines

* test: add trailing newline

* fix: blockquote formatting

* fix: node types

* fix: break line correctly

* fix: remove unnecessary properties to make AST_COMPARE happy

* fix: escape `|` in tableCell content

* fix: unexpected line break

* fix: ast difference from loose list

* fix: html break lines

* refactor: fix linting

* fix: normalize ast

* fix: escape specific chars

* test: add more tests

* fix: build markdown parser

* chore: remove unnecessary *.log

* fix: escape html entity

* feat: support prettier-ignore

* fix: line break for non-loose listItem

* feat: support formatting `code` based on `lang`

* fix: add `jsx` and `tsx`

* fix: use multiparser

* refactor: fix linting

* test: update test case 😉

* feat: switch to `_` style emphasis

* fix: sequence list should use different prefix

* test: add tests

* fix: do not print additional new line after `prettier-ignore`

* fix(list): enforce `1.` to avoid unnecessary git diff

* feat: enable `commonmark` option

* feat: support `break`
* fix: escape backslash
* refactor: escape html entity using backslash

* fix: respect autolink-style link

* feat: support md`...` and markdown`...`

* docs: replace ands with commas

* fix: respect indented code block

* fix: respect html entity

* docs: add docs for modified MDAST

* fix: inlineCode is breakline-able

* feat: support backtick in inlineCode

* feat: support a-lot-of-backtick in fenced code block

* feat: use `~~~`-style code block in js template

* fix: respect escaped chars

* fix: use `*`-style emphasis for invalid `_`-style output

* test: add test cases

* fix: use `- - -`-style thematicBreak to avoid conflict with yaml

* fix: remain the same content for linkReference identifier

* fix: `inlineCode` gap can be a line break

* fix: `html` should not print trailing spaces if it's in root

* refactor: fix typo

* fix: wrap `definition`'s url if there's whitespace

* fix: remove unnecessary whitespace at the end of paragraph

* fix: fix: remove unnecessary whitespace at the start of paragraph

* fix: setence children length is possible 0

* fix: support continuous ordered list

* fix: do not print addtional hardline after loose list

* fix: use double-backtick style for single-backtick value in inlineCode

* fix: support nested emphasis

* fix: support space-url in link/image

* fix: escape `)` in link/image url

* fix: support single-quote in link/image/definition title

* fix: respect alt in image/imageReference

* fix: use `*`-style thematicBreak in list

* fix: loose/tight list linebreaks

* fix: print third linebreak before indented code block with a tight list in the previous

* test: move bug cases

* fix: remove unnecessary linebreaks

* refactor: fix typohttp2: add support for sensitive headers

Add support for “sensitive”/“never-indexed” HTTP2 headers.

Fixes: https://github.com/nodejs/node/issues/34091

PR-URL: https://github.com/nodejs/node/pull/34145
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>http2: add `invalidheaders` test

Refs: https://github.com/nodejs/node/issues/29829

PR-URL: https://github.com/nodejs/node/pull/33161
Reviewed-By: Robert Nagy <ronagy@icloud.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>http2: rename counter in `mapToHeaders` inner loop

This change is to prevent potential bugs - e.g., someone might
automatically use the variable `k` instead of `key`, that is used in
vicinity of this loop.
Also changed postincrement to preincrement in iteration steps. It is
probably done by the optimizer anyway, but otherwise it will save an
opcode each iteration. And it is a good practice.

PR-URL: https://github.com/nodejs/node/pull/32012
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>http2: throw from mapToHeaders

PR-URL: https://github.com/nodejs/node/pull/24063
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Note: Landed with one collaborator approval after PR
      was open for 18 dayshttp2: improve http2 code a bit

Multiple general improvements to http2 internals for
readability and efficiency

PR-URL: https://github.com/nodejs/node/pull/23984
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Ujjwal Sharma <usharma1998@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>lib: port remaining errors to new system

PR-URL: https://github.com/nodejs/node/pull/19137
Reviewed-By: Anatoli Papirovski <apapirovski@mac.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>http2: simplify mapToHeaders, stricter validation

No longer check whether key is a symbol as Object.keys does not
return symbols. No longer convert key to string as it is always
a string. Validate that only one value is passed for each
pseudo-header.

Extend illegal connection header message to include the name of
the problematic header.

Extend tests to cover this behaviour.

PR-URL: https://github.com/nodejs/node/pull/16575
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>http2: fix mapToHeaders() with single string value

This is for issue 16452. When 'set-cookie' header is set with an array
that has only one string value, it's split into its individual
characters.

Fix by resetting `isArray` to false when the value is converted from an
array to a string.

Fixes: https://github.com/nodejs/node/issues/16452
PR-URL: https://github.com/nodejs/node/pull/16458
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Anatoli Papirovski <apapirovski@mac.com>http2: improve perf of passing headers to C++

By passing a single string rather than many small ones and
a single block allocation for passing headers, save expensive
interactions with JS values and memory allocations.

PR-URL: https://github.com/nodejs/node/pull/14723
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>
Reviewed-By: James M Snell <jasnell@gmail.com>http2: introducing HTTP/2

At long last: The initial *experimental* implementation of HTTP/2.

This is an accumulation of the work that has been done in the nodejs/http2
repository, squashed down to a couple of commits. The original commit
history has been preserved in the nodejs/http2 repository.

This PR introduces the nghttp2 C library as a new dependency. This library
provides the majority of the HTTP/2 protocol implementation, with the rest
of the code here providing the mapping of the library into a usable JS API.

Within src, a handful of new node_http2_*.c and node_http2_*.h files are
introduced. These provide the internal mechanisms that interface with nghttp
and define the `process.binding('http2')` interface.

The JS API is defined within `internal/http2/*.js`.

There are two APIs provided: Core and Compat.

The Core API is HTTP/2 specific and is designed to be as minimal and as
efficient as possible.

The Compat API is intended to be as close to the existing HTTP/1 API as
possible, with some exceptions.

Tests, documentation and initial benchmarks are included.

The `http2` module is gated by a new `--expose-http2` command line flag.
When used, `require('http2')` will be exposed to users. Note that there
is an existing `http2` module on npm that would be impacted by the introduction
of this module, which is the main reason for gating this behind a flag.

When using `require('http2')` the first time, a process warning will be
emitted indicating that an experimental feature is being used.

To run the benchmarks, the `h2load` tool (part of the nghttp project) is
required: `./node benchmarks/http2/simple.js benchmarker=h2load`. Only
two benchmarks are currently available.

Additional configuration options to enable verbose debugging are provided:

```
$ ./configure --debug-http2 --debug-nghttp2
$ NODE_DEBUG=http2 ./node
```

The `--debug-http2` configuration option enables verbose debug statements
from the `src/node_http2_*` files. The `--debug-nghttp2` enables the nghttp
library's own verbose debug output. The `NODE_DEBUG=http2` enables JS-level
debug output.

The following illustrates as simple HTTP/2 server and client interaction:

(The HTTP/2 client and server support both plain text and TLS connections)

```jt client = http2.connect('http://localhost:80');
const req = client.request({ ':path': '/some/path' });
req.on('data', (chunk) => { /* do something with the data */ });
req.on('end', () => {
  client.destroy();
});

// Plain text (non-TLS server)
const server = http2.createServer();
server.on('stream', (stream, requestHeaders) => {
  stream.respond({ ':status': 200 });
  stream.write('hello ');
  stream.end('world');
});
server.listen(80);
```

```js
const http2 = require('http2');
const client = http2.connect('http://localhost');

```

Author: Anna Henningsen <anna@addaleax.net>
Author: Colin Ihrig <cjihrig@gmail.com>
Author: Daniel Bevenius <daniel.bevenius@gmail.com>
Author: James M Snell <jasnell@gmail.com>
Author: Jun Mukai
Author: Kelvin Jin
Author: Matteo Collina <matteo.collina@gmail.com>
Author: Robert Kowalski <rok@kowalski.gd>
Author: Santiago Gimeno <santiago.gimeno@gmail.com>
Author: Sebastiaan Deckers <sebdeckers83@gmail.com>
Author: Yosuke Furukawa <yosuke.furukawa@gmail.com>

PR-URL: https://github.com/nodejs/node/pull/14239
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>tools: update ESLint to 3.5.0

PR-URL: https://github.com/nodejs/node/pull/8478
Reviewed-By: James M Snell <jasnell@gmail.com>Merge pull request #4062 from ashsearle:fix/3960

[bugfix] duration toString with mixed signs, fixes #3960Merge pull request #4146 from ashsearle/fix/4145

Fix #4145: floating-point errors in ISO duration formatMerge pull request #3611 from marwahaha:patch-3225

[feature] Durations gain validityMerge pull request #2357 from NobodysNightmare:feature/iso_date_bubbling

Improve unit bubbling for ISO dates[tests] Get TS tests working on Windows with cross-env (#5519)
Merge pull request #3708 from TracyGJG:develop

[feature] RFC2822 parsingMerge pull request #3112 from marijaselakovic:develop

optimize configFromStringAndFormatAdd commented console log that helps with debuggingMerge pull request #2211 from elvinyung:develop

Fix 0 hour checking in strict parsing.[bugfix] Support ISO 8601 YYYYMM format (#5458)
[feature] add support for [YYYY] as ISO8601 format (#4470)

* [feature] add support for [YYYY] as ISO8601 format (issue #3918) (#4470)

* [feature] add support for [YYYY] as ISO8601 format (issue #3918) (#4470)

revert support for extended years [+/-YYYYYY], it needs more discussion and workMerge pull request #2842 from ichernev:fix-ie8

Fix broken tests in IE8Merge pull request #2641 from ichernev:iso-8601

Implement basic format and comma as ms separator in ISO 8601Merge pull request #2404 from philjohnson789:develop

Fix Strict Date Parsing of ISO-8601 Dates Without TimesTest json parse errors (#8103)
Remove `babylon` parser (#7533)

* Remove `babylon`

* Add changelog

* Fix website filesNew build system (#4449)
child_process: replace var with let/const

PR-URL: https://github.com/nodejs/node/pull/30389
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: David Carlier <devnexen@gmail.com>
Reviewed-By: Gireesh Punathil <gpunathi@in.ibm.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>stream: use readableEncoding public api for child_process

PR-URL: https://github.com/nodejs/node/pull/28548
Refs: https://github.com/nodejs/node/issues/445
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>child_process: fix exec set stdout.setEncoding

cp.exec decide to use `_stdout`(_stdout is string) or
`Buffer.concat(_stdout)`(_stdout is buffer array) by options.encoding.
but std(out|err) encoding can be changed. If encoding is changed to
not null, `_stdout` will become string, and `Buffer.concat(_stdout)`
will throw TypeError. This patch will fix it, use
options.encoding and `std(out|err)._readableState.encoding`.

PR-URL: https://github.com/nodejs/node/pull/18976
Fixes: https://github.com/nodejs/node/issues/18969
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>tools,lib: forbid native Error constructors

This adds a rule that forbids the use of native Error constructors in
the `lib` directory. This is to encourage use of the `internal/errors`
mechanism. The rule is disabled for errors that are not created with
the `internal/errors` module but are still assigned an error code.

PR-URL: https://github.com/nodejs/node/pull/19373
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>util: implement util.getSystemErrorName()

Reimplement uv.errname() as internal/util.getSystemErrorName() to
avoid the memory leaks caused by unknown error codes
and avoid calling into C++ for the error names. Also
expose it as a public API for external use.

PR-URL: https://github.com/nodejs/node/pull/18186
Refs: http://docs.libuv.org/en/v1.x/errors.html#c.uv_err_name
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>lib: replace string concatenation with template

PR-URL: https://github.com/nodejs/node/pull/16920
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Franziska Hinkelmann <franziska.hinkelmann@gmail.com>uv: improvements to process.binding('uv')

* ensure that UV_... props are constants
* improve error message ... the error message when passing
  in `err >= 0` to `util._errnoException()` was less than
   useful.
* refine uses of process.binding('uv')

PR-URL: https://github.com/nodejs/node/pull/14933
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>child_process: fix deoptimizing use of arguments

Removed or fixed use of arguments in execFile(),
normalizeExecArgs(), and normalizeSpawnArguments().

Refs: https://github.com/nodejs/node/issues/10323
Refs: https://bugs.chromium.org/p/v8/issues/detail?id=6010
PR-URL: https://github.com/nodejs/node/pull/11535
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>child_process: remove empty if condition

This commit replaces an empty if-else-if with a single if
condition.

PR-URL: https://github.com/nodejs/node/pull/11427
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Santiago Gimeno <santiago.gimeno@gmail.com>child_process: preserve argument type

A previous fix for a `maxBuffer` bug resulted in a change to the
argument type for the `data` event on `child.stdin` and `child.stdout`
when using `child_process.exec()`.

This fixes the `maxBuffer` bug in a way that does not have that side
effect.

PR-URL: https://github.com/nodejs/node/pull/7391
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>
Reviewed-By: Jackson Tian <shyvo1987@gmail.com>
Fixes: https://github.com/nodejs/node/issues/7342
Refs: https://github.com/nodejs/node/issues/1901Revert "child_process: measure buffer length in bytes"

This reverts commit c9a5990a76ccb15872234948e23bdc12691c2e70.

PR-URL: https://github.com/nodejs/node/pull/7391
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>
Reviewed-By: Jackson Tian <shyvo1987@gmail.com>child_process: measure buffer length in bytes

This change fixes a known issue where `maxBuffer` limits by characters
rather than bytes. Benchmark added to confirm no performance regression
occurs with this change.

PR-URL: https://github.com/nodejs/node/pull/6764
Fixes: https://github.com/nodejs/node/issues/1901
Reviewed-By: Brian White <mscdex@mscdex.net>child_process: better error reporting for exec

Report path to executable and argv on error, stderr is not enough in
many cases.

fix #6796child_process: Avoid extra copy for string stdio

There's no need to create a new Buffer instance if we're just going to
immediately call toString() at the end anyway.  Better to create a
string up front, and setEncoding() on the streams, and do a string
concatenation instead.child_process: Callback with Buffers from exec

Only return strings when encoding is not null.src, lib: update after internal api change

Libuv now returns errors directly.  Make everything in src/ and lib/
follow suit.

The changes to lib/ are not strictly necessary but they remove the need
for the abominations that are process._errno and node::SetErrno().Remove child_process_legacychild_process_uv: add exec, fix simple/test-child-process-exec-cwdMerge pull request #16487 from Mugen87/dev30

 JSM: Added module and TS files for FBXLoader and NURBS.Moving NURBS code to /examples/js/curves for now.moved NURBS utility function to NURBSUtils and code clean-upadded NURBS curveMerge branch 'patch-3' of https://github.com/jayschwa/three.js into dev

# Conflicts:
#	docs/api/en/textures/Texture.htmlMerge pull request #11863 from WestLangley/dev-rotate_tex

Added support for texture rotationRemoved ObjectIdCount, MaterialIdCount and TextureIdCount. See #10095.Merge branch 'dev_6762' of https://github.com/rfm1201/three.js into devMerge pull request #19201 from Mugen87/dev41

Examples: Modularize JSZip.Merge pull request #17813 from Mugen87/dev34

3MFLoader: Fix relationship parsing.Merge pull request #17806 from Mugen87/dev34

3MFLoader: Add basic support for textures.Merge pull request #16436 from Mugen87/dev29

3MFLoader: Clean upMerge pull request #16419 from Mugen87/dev29

3MFLoader: Support nested components.Merge pull request #12654 from donmccurdy/feat-loaders-text-decoding

Loaders: Consolidate text decoding.Merge pull request #12045 from Mugen87/dev3

3MFLoader: Fix TextDecoder checkMerge pull request #11918 from Mugen87/dev

3MFLoader: Clean upMerge pull request #7425 from technohippy/add-3mf-loader

add 3MF LoaderRefactored PLYLoader.PLYLoader: Minor tweaks.Merge branch 'plyloader-improvements' of https://github.com/algrs/three.js into devMerge pull request #16444 from Mugen87/dev30

JSM: Added more module versions of loadersstream: fix sync write perf regression

While https://github.com/nodejs/node/pull/31046 did make async
writes faster it at the same time made sync writes slower.

This PR corrects this while maintaining performance improvements.

PR-URL: https://github.com/nodejs/node/pull/33032
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Brian White <mscdex@mscdex.net>
Reviewed-By: Zeyu Yang <himself65@outlook.com>stream: refactor Writable buffering

Refactors buffering in Writable to use an array
instead of a linked list.

PR-URL: https://github.com/nodejs/node/pull/31046
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>lib: change var to let/const

PR-URL: https://github.com/nodejs/node/pull/32037
Reviewed-By: Michael Dawson <michael_dawson@ca.ibm.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>stream: simplify isBuf

PR-URL: https://github.com/nodejs/node/pull/31067
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>benchmark,doc,lib,test: capitalize comments

This updates a lot of comments.

PR-URL: https://github.com/nodejs/node/pull/26223
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Vse Mozhet Byt <vsemozhetbyt@gmail.com>
Reviewed-By: Anto Aravinth <anto.aravinth.cse@gmail.com>stream: fix disparity between buffer and the count

This changes the disparity of bufferedRequestCount and the actual buffer
on file _stream_writable.js

PR-URL: https://github.com/nodejs/node/pull/15661
Fixes: https://github.com/nodejs/node/issues/6758
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>lib,src: improve writev() performance for Buffers

PR-URL: https://github.com/nodejs/node/pull/13187
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: use plain objects for write/corked reqs

This is similar to a change made awhile back for storing
process.nextTick() requests.

PR-URL: https://github.com/nodejs/node/pull/10558
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Evan Lucas <evanlucas@me.com>streams: support unlimited synchronous cork/uncork cycles

net streams can request multiple chunks to be written in a synchronous
fashion. If this is combined with cork/uncork, en error is currently
thrown because of a regression introduced in:
https://github.com/nodejs/node/commit/89aeab901ac9e34c79be3854f1aa41f2a4fb6888
(https://github.com/nodejs/node/pull/4354).

Fixes: https://github.com/nodejs/node/issues/6154
PR-URL: https://github.com/nodejs/node/pull/6164
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Mathias Buus <mathiasbuus@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>streams: 5% throughput gain when sending small chunks

Improves the performance when moving small buffers by 5%,
and it adds a benchmark to avoid regression in that area.
In all other cases it is equally performant to current master.

Full performance results available at:
https://gist.github.com/mcollina/717c35ad07d15710b6b9.

PR-URL: https://github.com/nodejs/node/pull/4354
Reviewed-By: James M Snell <jasnell@gmail.com>Merge remote-tracking branch 'joyent/v0.12' into v1.x

I was originally going to do this after the v0.11.15 release, but as
that release is three weeks overdue now, I decided not to wait any
longer; we don't want the delta to get too big.

Conflicts:
	lib/net.js
	test/simple/simple.status

PR-URL: https://github.com/iojs/io.js/pull/236
Reviewed-By: Bert Belder <bertbelder@gmail.com>
Reviewed-By: Fedor Indutny <fedor@indutny.com>stream: Guarantee ordering of 'finish' event

In synchronous Writable streams (where the _write cb is called on the
current tick), the 'finish' event (and thus the end() callback) can in
some cases be called before all the write() callbacks are called.

Use a counter, and have stream.Transform rely on the 'prefinish' event
instead of the 'finish' event.

This has zero effect on most streams, but it corrects an edge case and
makes it perform more deterministically, which is a Good Thing.streams: introduce .cork/.uncork/._writevstream: Use class for write buffer entriesstream: _write takes an encoding argument

This vastly reduces the overhead of decodeStrings:false streams,
such as net and http.stream: Split Writable logic into small functions

1. Get rid of unnecessary 'finishing' flag
2. Dont check both ending and ended. Extraneous.

Also: Remove extraneous 'finishing' flag, and don't check both 'ending'
and 'ended', since checking just 'ending' is sufficient.feat(foce): add ignoreForceLayout option in the graph edge (#11445)

* 关系图边增加forceIgnore属性，不参加节点位置计算
https://github.com/apache/incubator-echarts/issues/11422

* add a property for the graph edge to ignore force

* test case

* add a property for the graph edge to ignore forceto es6 module I.Fix the last commit.Merge branch 'dev-3.0.0'

# Conflicts:
#	.gitignore
#	.jshintrcbenchmark: use let instead of var in util

PR-URL: https://github.com/nodejs/node/pull/31794
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>benchmark: refactor util benchmarks

This significantly reduces the benchmark runtime. It removes to many
variations that do not provide any benefit and reduces the iterations.

PR-URL: https://github.com/nodejs/node/pull/22503
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: John-David Dalton <john.david.dalton@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Refael Ackermann <refack@gmail.com>util: use faster -0 check

PR-URL: https://github.com/nodejs/node/pull/15726
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Reviewed-By: Tobias Nießen <tniessen@tnie.de>
Reviewed-By: Benedikt Meurer <benedikt.meurer@gmail.com>
Reviewed-By: Yuta Hiroto <hello@about-hiroppy.com>benchmark: improve and add more inspect benchmarks

PR-URL: https://github.com/nodejs/node/pull/14881
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>Merge pull request #2977 from socketpair:rufix3

Russian locale: months abbreviationMerge pull request #3078 from ichernev:fix-word-parsing

Fix parsing for months/weekdays with weird characters[bugfix] Fix startOf/endOf DST issues while boosting performance (#4338)

* Fix startOf/endOf DST issues

* Performance improvements

* Rewrite for legibility

* Fix for years in range 0-99

* Remove placeholder comments

* Revert comment

* Remove useless special-case

* Code review change: use break consistenly

* Rename per code review

* Fix typo

* Inline variable to end naming debate

* Address review commentsMerge pull request #2982 from datyayu:develop

Add 'date' as alias to 'day' for startOf() and endOf().Fix jscs issuesFixed TrackballControls, RollControls and PathControls not handling window resize. Commented out key event swallowing in FlyControl. Started to fix examples not dealing properly with 0 sized window on init.

See #2062Merge remote-tracking branch 'remotes/mrdoob/dev' into devmerged mrdoob/devAdded forgotten FlyCamera.Merge pull request #16447 from Mugen87/dev30

JSM: Added modules and TS files for more controls classes.Merge branch 'master' of github.com:ecomfe/echartsFix map drag will still cause map redrawMerge branch 'master' of https://github.com/ecomfe/echartsRepeated subexpression in MTLLoader.js (#9207)

`value[ 1 ] === 0` is repeated. Looks like it should be `value [ 2 ] === 0` the second time.Merge pull request #10393 from looeee/BinaryTextureLoader/Deprecate

Deprecated BinaryTextureLoader in favour of DataTextureLoader[misc] minor typo in comments (#4817)

* minor typo in comments

* only update file in src/

* only update file in src/Merge pull request #3515 from markstos:hotfix-issue-2300

[feature] Fix #2300: Default to current week.Enable `unicorn/better-regex` (#7991)

* Enable `unicorn/better-regex`

* Spellcheck ignore regexfeat(yaml): support proseWrap (#4742)

- support `proseWrap` in `yaml`
- move `proseWrap` to `commonOptions`
- update to `yaml@1.0.0-rc.4` and `yaml-unist-parser@1.0.0-rc.1`Merge branch 'master' of github.com:prettier/prettier into next

* 'master' of github.com:prettier/prettier: (31 commits)
  Bump jest-watch-typeahead from 0.4.0 to 0.4.2 (#6923)
  Bump unified from 8.4.1 to 8.4.2 (#6927)
  refactoring: Babel's error recovery superseded option combinations (#6930)
  Update `fsevents` in yarn.lock (#6909)
  Run CI on the `next` branch
  Fix bin permissions (#6902)
  Add missing headings to changelog
  Fix code block in changelog
  Bump Prettier dependency to 1.19.1
  Release 1.19.1
  Quick-fix for stdin being broken in 1.19.0 (#6894)
  Fix `since` version for `vueIndentScriptAndStyle` (#6897)
  Remove out-of-date comment
  fix formatting of union type as arrow function return type (#6896)
  Try to fix some code blocks in 1.19.0 blog post
  Blog post, changelog and docs for 1.19 (#6787)
  Bump Prettier dependency to 1.19.0
  Release 1.19.0
  prettier 1.19.0-beta.1
  deduplicate entries in yarn.lock - part 2 (#6884)
  ...stream: write should throw on unknown encoding

Validate encoding passed to write(chunk, encoding, cb) and
throw if it is invalid.

PR-URL: https://github.com/nodejs/node/pull/33075
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>stream: throw invalid argument errors

Logic errors that do not depend on stream
state should throw instead of invoke callback
and emit error.

PR-URL: https://github.com/nodejs/node/pull/31831
Refs: https://github.com/nodejs/node/pull/31818
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: simplify Writable.write

Slightly refactors Writable.write for minor perf
and readability improvements.

PR-URL: https://github.com/nodejs/node/pull/31146
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: David Carlier <devnexen@gmail.com>stream: improve writable.write() performance

PR-URL: https://github.com/nodejs/node/pull/31624
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>stream: emit 'error' asynchronously

errorOrDestroy emits 'error' synchronously due to
compat reasons. However, it should be possible to
use correct async behaviour for new code.

PR-URL: https://github.com/nodejs/node/pull/29744
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: do not flush destroyed writable

It doesn't make much sense to flush a stream which has been destroyed.

PR-URL: https://github.com/nodejs/node/pull/29028
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: avoid writeAfterEnd() while ending

Calling `writable.end()` will probably synchronously call
`writable.write()`, in such a situation the `state.ended`
is false and `writable.write()` doesn't trigger `writeAfterEnd()`.

PR-URL: https://github.com/nodejs/node/pull/18170
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>stream: avoid possible slow path w UInt8Array

A chunk validity checks verifie if a chunk is a UInt8Array.
We should defer it as it might be very expensive in older Node.js
platforms.

PR-URL: https://github.com/nodejs/node/pull/13956
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Timothy Gu <timothygu99@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Tobias Nießen <tniessen@tnie.de>stream: support Uint8Array input to methods

PR-URL: https://github.com/nodejs/node/pull/11608
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>stream: avoid additional validation for Buffers

These changes result in ~50% improvement in the included benchmark.

PR-URL: https://github.com/nodejs/node/pull/10580
Reviewed-By: Сковорода Никита Андреевич <chalkerx@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>lib: remove unused variables

PR-URL: https://github.com/iojs/io.js/pull/1290
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>stream: use nop as write() callback if omitted

This commit introduces a nop function that is used as the
Writable.prototype.write() callback when one is not provided.
This saves on function object creation.

PR-URL: https://github.com/iojs/io.js/pull/564
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>Merge remote-tracking branch 'ry/v0.10' into master

Conflicts:
	AUTHORS
	ChangeLog
	deps/uv/ChangeLog
	deps/uv/config-unix.mk
	deps/uv/src/unix/stream.c
	deps/uv/src/version.c
	deps/uv/uv.gyp
	src/node.cc
	src/node_buffer.cc
	src/node_crypto.cc
	src/node_version.h
	src/stream_wrap.cc
	src/stream_wrap.hnet: Provide better error when writing after FIN

The stock writable stream "write after end" message is overly vague, if
you have clearly not called end() yourself yet.

When we receive a FIN from the other side, and call destroySoon() as a
result, then generate an EPIPE error (which is what would happen if you
did actually write to the socket), with a message explaining what
actually happened.stream: Do not switch to objectMode implicitly

Only handle objects if explicitly told to do so in the options
object.  Non-buffer/string chunks are an error if not already in
objectMode.

Close #4662stream: Writable should ignore encoding for buffers

Fix #4727
Fix einaros/ws#159Merge pull request #18469 from donmccurdy/keyframetrack-optimize-safe

KeyframeTrack: Don't overwrite times/values in optimize()Merge pull request #15011 from donmccurdy/feat-gltfexporter-multimorphanimations

GLTFExporter: Support individual morph target animation.Merge pull request #12584 from Itee/KeyFrameTrack

KeyframeTrack: Remove KeyframeTrackPrototype and KeyframeTrackConstructorMerge pull request #7312 from tschw/Animation

Animation: Interpolants & extensibility overhaul.Merge pull request #19565 from linbingquan/dev-cleanup-core

Core: CLean up.Merge pull request #18783 from Mugen87/dev39

Geometry: Make .fromBufferGeometry() more generic.Merge pull request #17548 from Mugen87/dev38

Geometry: Better logging in .fromBufferGeometry().Merge pull request #16446 from sciecode/dev9

Geometry: Clean upMerge pull request #14547 from erasta/dev_geomfrombuff

Reduce memory allocation on Geometry.fromBufferGeometryMerge pull request #11141 from Mugen87/dev

Geometry: Fixed #11140Refactored EventDispatcher usage.Merge pull request #8195 from Mugen87/dev

New BoxBufferGeometryGeometry: Reverted fromGeometry bugfix. See #7674.Merge pull request #7674 from bhouston/bufferGeometryToGeometryBugFix

Fix bug in conversion of BufferedGeometry to Geometry.jslint/jshint fixesMerge pull request #7618 from simonThiele/dev

Fix for loop inside Geometry.fromBufferGeometryRemoved IndexBufferAttribute. Promoted index attribute to BufferGeometry. Maybe .addIndices() instead?
/ping @benaadamsWebGLRenderer: Removed drawcall.index. See #7003.Geometry.fromBufferGeometry(): Support drawcalls/offsets. See #5864.Geometry: Clone uvs in fromBufferGeometry(). See #5567Geometry: Avoid creating undefined uvs in .fromBufferGeometry(). Fixes #5567.Geometry: Simplified to just merge() and mergeMesh().Interactive examples clean up.Geometry.fromBufferGeometry() also cloning colors.Cloning normals in Geometry.fromBufferGeometry(). Bad things happen otherwise.Geometry: Fixed fromBufferGeometry().Minor tweaks.Added fromBufferGeometry() method to Geometry.lib: replace var with let/const

PR-URL: https://github.com/nodejs/node/pull/30409
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Gireesh Punathil <gpunathi@in.ibm.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>benchmark,lib,test: use braces for multiline block

For if/else and loops where the bodies span more than one line, use
curly braces.

PR-URL: https://github.com/nodejs/node/pull/13828
Ref: https://github.com/nodejs/node/pull/13623#discussion_r123048602
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>lib: remove let from for loops

This is a known de-opt. It may not be 100% necessary in all cases but it
seems like a decent enough idea to avoid it.

PR-URL: https://github.com/nodejs/node/pull/8873
Reviewed-By: Brian White <mscdex@mscdex.net>
Reviewed-By: Ilkka Myller <ilkka.myller@nodefield.com>
Reviewed-By: Johan Bergström <bugs@bergstroem.nu>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>lib: make tls.checkServerIdentity() more strict

PR-URL: https://github.com/nodejs/node-private/pull/75
Reviewed-By: Fedor Indutny <fedor.indutny@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>stream: save error in state

Useful for future PR's to resolve situations where e.g. finished()
is invoked on an already errored streams.

PR-URL: https://github.com/nodejs/node/pull/34103
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>stream: update comment to indicate unused API

destroy w/ callback was previously used by node
core. This is no longer the case and the
comments should reflect this to avoid confusion.

PR-URL: https://github.com/nodejs/node/pull/32808
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>stream: fix multiple destroy calls

Previously destroy could be called multiple times causing inconsistent
and hard to predict behavior. Furthermore, since the stream _destroy
implementation can only be called once, the behavior of applying destroy
multiple times becomes unclear.

This changes so that only the first destroy() call is executed and any
subsequent calls are noops.

PR-URL: https://github.com/nodejs/node/pull/29197
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: removed outdated TODO

Was resolved in https://github.com/nodejs/node/commit/e559842188f541b884abff2ffad4d2d3e1b841a6.

PR-URL: https://github.com/nodejs/node/pull/31701
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>stream: finished callback for closed streams

Previously finished(stream, cb) would not invoke the callback
for streams that have already finished, ended or errored
before being passed to finished(stream, cb).

PR-URL: https://github.com/nodejs/node/pull/31509
Refs: https://github.com/nodejs/node/pull/31508
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: do not emit 'end' after 'error'

Refs: https://github.com/nodejs/node/issues/6083

PR-URL: https://github.com/nodejs/node/pull/31182
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: error state cleanup

Clean up end simplify errored state.

- errorEmitted should be set in the same tick as 'error' is emitted.
- errored should be set as soon as an error occurs.
- errored should exist on Readable as well.
- refactor destroy logic and make it easier to follow.

PR-URL: https://github.com/nodejs/node/pull/30851
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: always invoke callback before emitting error

Ensure the callback is always invoked before emitting
the error in both sync and async case.

PR-URL: https://github.com/nodejs/node/pull/29293
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>Revert "stream: invoke callback before emitting error always"

This reverts commit 3de5eae6dbe503485b95bdeb8bddbd67e4613d59.

PR-URL: https://github.com/nodejs/node/pull/29741
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Jiawen Geng <technicalcute@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>stream: invoke callback before emitting error always

Ensure the callback is always invoked before emitting
the error in both sync and async case.

PR-URL: https://github.com/nodejs/node/pull/29293
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>stream: avoid unecessary nextTick

If we are not going to emit 'close' then there is no reason to
schedule it.

PR-URL: https://github.com/nodejs/node/pull/29194
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>stream: fix destroy() behavior

Ensure errorEmitted is always set. Only emit 'error' once.

PR-URL: https://github.com/nodejs/node/pull/29058
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Franziska Hinkelmann <franziska.hinkelmann@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>stream: ensure writable.destroy() emits error once

Prevent the `'error'` event from being emitted multiple times if
`writable.destroy()` is called with an error before the `_destroy()`
callback is called.

Emit the first error, discard all others.

PR-URL: https://github.com/nodejs/node/pull/26057
Fixes: https://github.com/nodejs/node/issues/26015
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>Revert "stream: prevent 'end' to be emitted after 'error'"

This reverts commit 08577906569a4c2de70ad2a861e2f8456cd8fcdd.

PR-URL: https://github.com/nodejs/node/pull/20449
Fixes: https://github.com/nodejs/node/issues/20334
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>stream: prevent 'end' to be emitted after 'error'

This PR adds _readableState.errorEmitted and add the tracking of it.

Fixes: https://github.com/nodejs/node/issues/6083

PR-URL: https://github.com/nodejs/node/pull/20104
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>stream: always emit error before close

PR-URL: https://github.com/nodejs/node/pull/19836
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>stream: updated streams error handling

This improves error handling for streams in a few ways.

1. It ensures that no user defined methods (_read, _write, ...) are run
after .destroy has been called.
2. It introduces an explicit error to tell the user if they are write to
write, etc to the stream after it has been destroyed.
3. It makes streams always emit close as the last thing after they have
been destroyed
4. Changes the default _destroy to not gracefully end streams.

It also updates net, http2, zlib and fs to the new error handling.

PR-URL: https://github.com/nodejs/node/pull/18438
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: Anna Henningsen <anna@addaleax.net>net: return this from destroy()

PR-URL: https://github.com/nodejs/node/pull/13530
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Tobias Nießen <tniessen@tnie.de>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Reviewed-By: Michael Dawson <michael_dawson@ca.ibm.com>
Reviewed-By: Gibson Fahnestock <gibfahn@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>stream: fix destroy(err, cb) regression

Fixed a regression that caused the callback passed to destroy()
to not be called if the stream was already destroyed.
This caused a regression on the ws module in CITGM introduced by
https://github.com/nodejs/node/pull/12925.

PR-URL: https://github.com/nodejs/node/pull/13156
Fixes: https://github.com/websockets/ws/issues/1118
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Calvin Metcalf <calvin.metcalf@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Refael Ackermann <refack@gmail.com>stream: add destroy and _destroy methods.

Adds destroy() and _destroy() methods to Readable, Writable, Duplex
and Transform. It also standardizes the behavior and the implementation
of destroy(), which has been inconsistent in userland and core.
This PR also updates all the subsystems of core to use the new
destroy().

PR-URL: https://github.com/nodejs/node/pull/12925
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Calvin Metcalf <calvin.metcalf@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>Moved ShapePath out of Path.*Path: Implemented Object.assign(). See #8838.Merge pull request #6738 from dubejf/typos

Fix typosMerge pull request #6481 from CodingFabian/strict-equalities

use strict (in)equalitiesMerge pull request #4873 from zz85/codestyle3

Code Style Improvements 2Merge branch 'pathholes' of https://github.com/jahting/three.js into devRelease 5.12.0 (#15925)
Release 5.10.0 (#15303)
Release 5.6.0 (#14370)
Release 5.4.2 (#14174)
Release 5.1.1 (#13566)
Release 5.1.0 (#13354)
Release 5.0.12 (#13029)
Release 5.0.11 (#12999)
Adding FA filesperfomance fixes, eslint fixes (#4482)
Remove `baseKeys` and `baseKeysIn`.Simplify isType modules.Use `Array.isArray`.Apply even more let/const transforms.benchmark: add `test` and `all` options and improve errors"

This reverts commit 4671d551cf9210434bdadf65ee5654606d24da70 and
contains a fix to the issue raised for the revert.

PR-URL: https://github.com/nodejs/node/pull/31755
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Vladimir de Turckheim <vlad2t@hotmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>Revert "benchmark: add `test` and `all` options and improve errors"

This reverts commit dac579516ca662e731ac502c15e75009a2b9a8c9.

Refs: https://github.com/nodejs/node/pull/31396
PR-URL: https://github.com/nodejs/node/pull/31722
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Gus Caplan <me@gus.host>
Reviewed-By: Vladimir de Turckheim <vlad2t@hotmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>benchmark: add `test` and `all` options and improve errors

This adds a new `test` option. Using it automatically uses a single
minimal option matrix to verify the benchmark works as expected.

Using the new `all` option makes sure all test suites are run.

On top of that the benchmarks will from now on report properly
what category might have a typo, if any.

The http duration was also refactored to use a option instead of
relying on a configuration setting.

The fixture folder is ignored as test suite from now on.

PR-URL: https://github.com/nodejs/node/pull/31396
Fixes: https://github.com/nodejs/node/issues/31083
Reviewed-By: Sam Roberts <vieuxtech@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>benchmark: improve `--filter` pattern matching

  * Let users provide more than one pattern by repeating the flag
  * Add new flag --exclude to exclude patterns
  * Add tests for --filter
  * Document --filter

This commit also fixes a bug where things like
`compare.js --new --old binary --new binary` was acceptable (now the
script will exit and print the usage message).

PR-URL: https://github.com/nodejs/node/pull/29987
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Denys Otrishko <shishugi@gmail.com>
Reviewed-By: Rich Trott <rtrott@gmail.com>benchmark,doc,lib,test: capitalize comments

PR-URL: https://github.com/nodejs/node/pull/26483
Reviewed-By: Vse Mozhet Byt <vsemozhetbyt@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>benchmark: remove unreachable return

PR-URL: https://github.com/nodejs/node/pull/25883
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: Richard Lau <riclau@uk.ibm.com>benchmark: add progress indicator to compare.js

* Print the progress bar and the current benchmark to stderr
  when stderr is TTY and stdout is not.
* Allow cli arguments without values via setting.boolArgs
* Add --no-progress option

PR-URL: https://github.com/nodejs/node/pull/10823
Fixes: https://github.com/nodejs/node/issues/8659
Reviewed-By: Andreas Madsen <amwebdk@gmail.com>benchmark: refactor to use process.send

This removes the need for parsing stdout from the benchmarks. If the
process wasn't executed by fork, it will just print like it used to.

This also fixes the parsing of CLI arguments, by inferring the type
from the options object instead of the value content.

Only two benchmarks had to be changed:

* http/http_server_for_chunky_client.js this previously used a spawn
now it uses a fork and relays the messages using common.sendResult.

* misc/v8-bench.js this utilized that v8/benchmark/run.js called
global.print and reformatted the input. It now interfaces directly
with the benchmark runner global.BenchmarkSuite.

PR-URL: https://github.com/nodejs/node/pull/7094
Reviewed-By: Trevor Norris <trev.norris@gmail.com>
Reviewed-By: Jeremiah Senkpiel <fishrock123@rocketmail.com>
Reviewed-By: Brian White <mscdex@mscdex.net>
Reviewed-By: Anna Henningsen <anna@addaleax.net>Merge pull request #3817 from billschaller:patch-2

[misc] Don't enumerate momentProperties with 'in'Merge pull request #2773 from rclanan:develop

New isUndefined utility method[bugfix] Make Duration#as work with quarters (#4887)
Merge pull request #2461 from ichernev:duration-bubble

Improved duration bubbling, fixes #2166Simplify expression in duration#as (#2286)Merge pull request #11447 from deqingli/master

fix #10471support diff group children by name in custom series.Merge branch 'master' of github.com:ecomfe/echartsbrsuh (solution II, not finished)Merge pull request #16344 from jangxx/dev

Bug fix for an oversight in SSAOPassMerge pull request #15279 from Mugen87/dev7

SSAOPass: Clean upMerge pull request #15243 from Mugen87/dev9

SSAO: New implementationMerge pull request #18982 from HTLife/patch-1

Fix binary reading problem of PCD formatFixed some lgtm alerts.Merge pull request #11685 from Mugen87/dev3

PCDLoader: RefactoringMerge pull request #11657 from Mugen87/pcd

PCDLoader: Clean upMerge pull request #8043 from filipecaixeta/dev

Loader for PCD filesMerge pull request #17542 from gkjohnson/jsm-linting

Linting: Lint JSM Example FilesMerge pull request #17441 from kaisalmen/OBJLoader2_V301

OBJLoader2(Parallel) 3.1.0Merge pull request #16969 from Mugen87/dev34

JSM: Added TS files for OBJLoader2 and fix style issues.Merge pull request #16887 from kaisalmen/OBJLoader2_V300_Beta2

OBJLoader2 and OBJLoader2Parallel V3.0.0-beta2Merge pull request #16376 from kaisalmen/OBJLoader2_V300_beta_es6

OBJLoader2 V3.0.0-Beta as jsmPCDLoader: Clean uptest: refactor common.expectsError

This completely refactors the `expectsError` behavior: so far it's
almost identical to `assert.throws(fn, object)` in case it was used
with a function as first argument. It had a magical property check
that allowed to verify a functions `type` in case `type` was passed
used in the validation object. This pattern is now completely removed
and `assert.throws()` should be used instead.

The main intent for `common.expectsError()` is to verify error cases
for callback based APIs. This is now more flexible by accepting all
validation possibilites that `assert.throws()` accepts as well. No
magical properties exist anymore. This reduces surprising behavior
for developers who are not used to the Node.js core code base.

This has the side effect that `common` is used significantly less
frequent.

PR-URL: https://github.com/nodejs/node/pull/31092
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>src: remove `process.binding('config').debugOptions`

`process.binding('config').debugOptions`, which contains the initial
values of parsed debugger-related CLI options, has been used for
internal testing. This patch removes them and uses `internal/options`
to query the values in the tests instead.

PR-URL: https://github.com/nodejs/node/pull/25999
Reviewed-By: Daniel Bevenius <daniel.bevenius@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>
Reviewed-By: James M Snell <jasnell@gmail.com>fs,cluster,net: assign error codes to remaining errors

After this commit, all errors thrown from JS code in lib have an error
code.

PR-URL: https://github.com/nodejs/node/pull/19373
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>
Reviewed-By: James M Snell <jasnell@gmail.com>test: move inspector tests to parallel/sequential

* remove inspector directory artifacts

PR-URL: https://github.com/nodejs/node/pull/16197
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>inspector: rewrite inspector test helper

Helper was rewritten to rely on promises instead of manually written
queue and callbacks. This simplifies the code and makes it easier to
maintain and extend.

PR-URL: https://github.com/nodejs/node/pull/14797
Reviewed-By: Timothy Gu <timothygu99@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>Revert "inspector: rewrite inspector test helper"

This reverts commit 2296b677fb1e2ea71e86a899b028ba9e817e86ad.

That commit was landed without a green CI and is failing on Windows.

Ref: https://github.com/nodejs/node/pull/14460
PR-URL: https://github.com/nodejs/node/pull/14777
Reviewed-By: Refael Ackermann <refack@gmail.com>inspector: rewrite inspector test helper

Helper was rewritten to rely on promises instead of manually written
queue and callbacks. This simplifies the code and makes it easier to
maintain and extend.

PR-URL: https://github.com/nodejs/node/pull/14460
Reviewed-By: James M Snell <jasnell@gmail.com>cluster: overriding inspector port

Added an option to override inspector port for workers using
`settings.inspectPort` will override default port incrementing behavior.
Also, using this option allows to set 0 port for the whole cluster.

PR-URL: https://github.com/nodejs/node/pull/14140
Fixes: https://github.com/nodejs/node/issues/8495
Fixes: https://github.com/nodejs/node/issues/12941
Refs: https://github.com/nodejs/node/pull/9659
Refs: https://github.com/nodejs/node/pull/13761
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>inspector,cluster: fix inspect port assignment

* Adding --inspect-port with debug port, instead of parsing `execArgv`

* Export CLI debug options to `process.binding('config').debugOptions`
  (currently used only in tests)

PR-URL: https://github.com/nodejs/node/pull/13619
Refs: https://github.com/nodejs/node/pull/9659
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Sam Roberts <vieuxtech@gmail.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>Merge pull request #16546 from Mugen87/dev32

JSM: Added module and TS file for SSAOPass and SimplexNoise.Merge pull request #18864 from makc/lgtm-fixes

Another round of lgtm fixesMerge pull request #17010 from Mugen87/dev36

TrackballControls: Clean up.Merge pull request #17002 from Mugen87/dev36

TrackballControls: Introduce custom mouse mappings.Merge pull request #16997 from Mugen87/dev34

TrackballControls: Fix key states.Merge pull request #15518 from mrdoob/modularize-examples

Added script to generate modules out of example/js files.Merge pull request #8253 from tschw/revert7492

Revert "Keep TrackballControls from consuming all events."Merge pull request #7492 from tschw/TrackballEvents

Keep TrackballControls from consuming all events.Merge pull request #6123 from daron1337/TrackballControls-rotation

TrackballControls with new rotation modeMerge branch 'trackballControls' of https://github.com/daron1337/three.js into dev

Conflicts:
	examples/js/controls/TrackballControls.jsTrackballControls clean up.Merge branch 'dev' of https://github.com/marklundin/three.js into devFix mouse tracking bug when dom element is scrolled to a different position.

When using getBoundingClientRect, the returned coordinates are relative to the viewport.  If the page is then scrolled and we have a dom element that is not the document, the top and left offsets are out of date, thus the rotation calculations are off (sometimes by a lot).

In this fix, we instead do all calculations relative to the document (not the viewport) by adjusting the screen.left and screen.top variables with the scroll offset and using pageX/pageY instead of clientX/clientY for the click coordinates.Removed unnecessary Vector3 clone's in update loop in TrackballControls.Merge branch 'startend' of https://github.com/jasongrout/three.js into dev#fixes 3579

I haven't tested the problem but it was a bad idea anyways to have start and end have the same referenceObjectTrackballControls: Implemented pinch gesture for zooming. Thanks @ericnoble.
Sadly I didn't get the damping to work...Merge remote-tracking branch 'remotes/mrdoob/dev' into devMerge remote-tracking branch 'remotes/mrdoob/dev' into editor-outliner-ui

Conflicts:
	editor/js/ui/Viewport.jsMerge remote-tracking branch 'remotes/mrdoob/dev' into devRemoved unused supr.Merge remote-tracking branch 'huttarl/dev' into devMerge remote-tracking branch 'remotes/mrdoob/dev' into dev

WebGL part of this branch is completely broken. Do not use. This is for further merging.Updated 3D Text Geometry and exampleMerge pull request #16537 from Mugen87/dev30

JSM: More modules and TS files for FX-passes.Merge pull request #14842 from WestLangley/dev-deprecate_clearTarget

Deprecate WebGLRenderer.clearTarget()Merge pull request #13480 from WestLangley/dev-white_nearest

BasicDepthPacking: white nearestSAOPass: Fixed handling of orthographic cameraMerge pull request #13091 from cnspaha/patch-4

SAOPass: Update camera near and far plane on each renderingMerge pull request #11458 from Ludobaka/sao

Scalable Ambient Occlusion (SAO) post processing effect (3rd Try)Update remark parse v8 (#8140)

* Update `remark-parse` to v7

* fix `link` title and  `inlineCode`

* fix `code` meta

* fix code meta

* fix ListItem print

* fix heading print result

* remove blank line before childList

* trim `inlineCode` ast

* use List.spread

* use ListItem.spread

* fix `example-550.md` snap

* update `example-522.md` snap

* update `example-508.md` snap

* update `example-509.md` snap

* update `example-222.md` snap

* Update listitem print

* lower case definition.label to match ast

* trim definition.label to match ast

* trim definition.label to match ast

* unescape Link.title

* filter link with no title

* fix link title

* fix link title

* restore preprocess

* fix ast massage

* Restore list

* Update to remark-parse 8.0.2

* Update snapshot tests after rebase

* Create legacy `loose` attribute from `spread`

Uses @duailibe's suggestion from here:
https://github.com/prettier/prettier/issues/6180#issuecomment-499498432

Also backtracks some other unnecessary changes.

* Update test case for shortcut reference-style links

The commonmark spec does not allow for whitespace between the left and right
parts of a full reference-style link.

https://spec.commonmark.org/dingus/?text=%5Bfoo%5D%20%5Bbar%5D%0A%0A%5Bbar%5D%3A%20%2Furl%20%22title%22%0A

Notice that the `[foo]` is parsed as plain text, while the `[bar]` is parsed
as a shortcut reference link.

When there is a space between the two, each part is parsed as a separate
shortcut style reference link node:

https://astexplorer.net/#/gist/d69f5a227e2cbde3f43f0a639bee165c/822b531c252c162faba78e38607db73ef72886d5

Previously they would have been parsed as a single full reference link.

Here I update the test-case to account for the shortcut style links.

* Add remark-footnotes plugin to replace legacy footnotes option

Remark removed the footnotes option in favor of a new remark-footnotes
plugin in https://github.com/remarkjs/remark/pull/483

Here I've simply switched to use the plugin instead of the removed
option and updated the snapshot tests.

* Add test case for #4369

* Do not add gap if has leading space

* Restore `inlineCode` ast compare

* Restore `isPrevNodeLooseListItem`

* Ignore some ast property

* Restore blank line, Fix `isPrevNodeLooseListItem` check

* Title compare

* Ignore `loose`

* Fix footnoteDefinition

* Fix tabWidth

* Style

* `footnoteDefinition` is stable now

* Fix `_` after link

* Revert workaround, url tests

* Fix idempotence issue with underscores and autolinks

* Fix idempotence issue with underscores and autolinks - attempt # 2

* Fix idempotence issue with underscores and autolinks - attempt # 3

* Fix idempotence issue with underscores and autolinks - part # 4

* More tests

* Code style

* Only test master passed tests

* Update list

* Update list

* Use code as test name

* Fix idempotence issue with underscores and autolinks - part # 5

* Fix idempotence issue with underscores and autolinks - part # 6

* Linting fix

* More autolink tests

* Fix tests

* Rename to `auto-link`

* More tests

* Disable new cases

* tests for issue 4122

* add changelog

Co-authored-by: fisker <lionkay@gmail.com>
Co-authored-by: Georgii Dolzhykov <thorn.mailbox@gmail.com>Support dynamic languages in front matter (#8381)
Vue: Support custom blocks (#8023)

* Support Vue Custom Block

* Add changelog

* Udpate snapshots

* Support "type" for json

* Remove guessing languages

* Modify to reuse inferScriptParser logic

* Implement withInnerParts arg for stripTrailingHardline

* Rename isVueCustomBlock

* Set `verbose: true`

* Use getParserName

* Ignore vueIndentScriptAndStyle

* tmp

* Fix formatting

* Add tests

* Fix by lint

* Revert "Set `verbose: true`"

This reverts commit f65c7cd7d814d3149aadbeb3cfd00c5372887c33.

* loop with i--

* Modify to preserve unknown langauge

* Support embeddedLanguageFormatting

* Fix by lint

* Fix mistake

* Modify to preserve unknown lang

* Remove unnecesary condition

* Add error tests

Co-authored-by: fisker Cheung <lionkay@gmail.com>api: remove the version parameter of getSupportInfo (#7620)

* api: remove the version parameter of getSupportInfo

* add changelog entry

* remove mapDeprecated

* Update pr-7620.md

* remove the first parameter completely

* Update api.md

* add default value for opts just to be on the safe sideEnable `unicorn/prefer-string-slice` (#7251)

Rename "babylon" with "babel" (#5647)
fix(markdown): preserve leading/trailing newlines in fenced code block (#5038)

feat: support MDX (#4975)

* feat: support MDX

* refactor: flip conditionfeat(json): add jsonc to aliases and use it to find parser in markdown embed (#4734)

feat: format yaml front matter (#4773)

* refactor: front-matter

* feat: format yaml front matterDo not require space after markdown block language name (#4783)

https://github.com/prettier/prettier/pull/4153 made it possible to detect fenced code block language when it is followed by arguments (e.g. ` ```js {something=something} `). This PR makes it also possible to detect language in cases cases like ` ```js{something=something} ` (no space).

The reason for this change is that Atom highlights code blocks regardless of a space after the language name, which makes users wonder why the correctly detected code block is not being formatted:

<img width="324" alt="screen shot 2018-06-28 at 22 08 13" src="https://user-images.githubusercontent.com/608862/42060780-db11f5b6-7b1f-11e8-9f43-fe91843f7d89.png">

PR background: https://github.com/prettier/prettier/pull/4153#issuecomment-401174999 Use destructuring for imports (#4554)

* Use destructuring for imports

* Clean up integration tests

* Use moduleNameMapper for require_prettierRefactoring: better boundaries for different parts of the project (#4364)
refactor: remove duplicate mapDoc (#4310)
fix(markdown): null check for code.lang (#4307)
feat(markdown): support fenced codeblock lang followed by attributes (#4153)

* test: add tests

* feat(markdown): support fenced codeblock lang followed by attributes
ref: https://shd101wyy.github.io/markdown-preview-enhanced/#/code-chunk

* refactor: set limitfix(markdown): print literalline for newline instead of hardline (#4083)

* test: add tests

* fix(markdown): print literalline for newline instead of hardline

* test: add testsAutomatically load plugins from package.json (#3624)

* Automatically load plugins from package.json

* Fix build by adding json extension

* Fixup misuse of options argument

* Rewire graceful-fs to fs

* Document graceful-fs issue

* Alias graceful-fs to fs in Rollupfix(markdown): replace newlines with hardlines in multiparser (#3611)

* test: add failing test

* fix(markdown): replace newlines with hardlines in multiparserMerge pull request #19953 from Mugen87/dev42

Editor: Remove author comments.Editor.Config: Renamed project/history/stored to settings/history. False by default.Merge pull request #7400 from lxxxvi/dev

Renaming of commands (aesthetics)Merge pull request #7337 from lxxxvi/dev

Implementation of Undo/Redo functionality for threejs-editor[TreeView] Add disabled prop (#20133)
[TreeView] Change focus management to aria-activedescendant (#21695)
[TreeView] Add onIconClick and onLabelClick (#20657)
[TreeView] disable all selection when disableSelection (#20146)
[Treeview] Add node selection support (#18357)
[TreeView] Add controlled API to TreeView (#18165)
[TreeView] Add new component (#14827)

* Initial Commit

* Different approach

* Remove IconButton and change title to label

* Add top level node navigation

* Fix click handler

* Try a different approach

* Basic keyboard support

* Add ArrowLeft and ArrowRight support

* Support asterisk key

* Add a-zA-Z support

* Fix keyboard support

* Make id a string

* Update docs

* Move to component API

* Update api page

* forward ref

* makeStyles -> withStyles

* id -> nodeId

* Remove custom focused class

* use useIsFocusVisible

* Move Tree View into the lab section

* Remove useIsFocusVisible

* Add more correct event handling

* TypeScript

* Improve demo

* yarn docs:api

* Add warning for TreeNode not inside TreeView

* Prettier

* Add 'chain' functions

* Add initial tests

* More tests

* Tests

* Fix infinite loop

* fix infinite loop

* Tests and withStyles names and exports

* The last of the tests... for now

* export styles

Co-Authored-By: Olivier Tassinari <olivier.tassinari@gmail.com>

* export styles

Co-Authored-By: Olivier Tassinari <olivier.tassinari@gmail.com>

* Code review changes

* yarn docs:api

* TypeScript demo

* seb code review

* TreeNode -> TreeItem

* TreeItem typescript

* Fixed merge

* Change to use event bubbling

* Add TypeScript exportsPMREMGenerator: Removed temporal Scenes.Merge pull request #19020 from WestLangley/dev_pmrem_cleanup

PMREMGenerator: CleanupMerge pull request #19011 from Mugen87/dev41

PMREMGenerator: Refactor code.PMREMGenerator: Fixed linter issues.PMREMGenerator: Clean up.Merge pull request #18212 from mrdoob/pmrem

Moved PMREMGenerator to src/extrasrefactor(ngOptions): access `copy()` directly (`angular.copy` --> `copy`)style(ngModel,ngOptions): make use of declared but unused variablesfix(ngOptions): only watch numeric properties of an array

It turns out that the options that are displayed are more constrained than
just whether the property starts with a $ character.
If the values collection is array-like then we only display the options that
are identified by numerical properties - it's an array right?

So this commit aligns `getWatchables` with `getOptions`.

See #12010fix(ngOptions): do not watch properties starting with $

Expressions that compute labels and track by values for ngOptions were
being called for properties, that start with $ even though those properties
were being ignored as options.

Closes #11930
Closes #12010fix(ngOptions): ensure that tracked properties are always watched

Commit 47f9fc3e70bc361e8c11fe68dc3ec4489238efb3 failed to account for changes to
the tracked value of model items in a collection where the select was `multiple`.

See https://github.com/angular/angular.js/pull/11743#discussion_r29424578

Closes #11784fix(ngOptions): ensure label is watched in all cases

Closes #11765fix(ngOptions): iterate over the options collection in the same way as `ngRepeat`

In `ngRepeat` if the object to be iterated over is "array-like" then it only iterates
over the numerical indexes rather than every key on the object. This prevents "helper"
methods from being included in the rendered collection.

This commit changes `ngOptions` to iterate in the same way.

BREAKING CHANGE:

Although it is unlikely that anyone is using it in this way, this change does change the
behaviour of `ngOptions` in the following case:

* you are iterating over an array-like object, using the array form of the `ngOptions` syntax
(`item.label for item in items`) and that object contains non-numeric property keys.

In this case these properties with non-numeric keys will be ignored.

** Here array-like is defined by the result of a call to this internal function:
https://github.com/angular/angular.js/blob/v1.4.0-rc.1/src/Angular.js#L198-L211 **

To get the desired behaviour you need to iterate using the object form of the `ngOptions` syntax
(`value.label` for (key, value) in items)`).

Closes #11733perf(ngOptions): only perform deep equality check on ngModel if using track by

Closes #11448
Closes #11447fix(ngOptions): fix model<->option interaction when using track by

This problem is beset by the problem of `ngModel` expecting models  to be
atomic things (primitives/objects).

> When it was first invented it was expected that ngModel would only be
a primitive, e.g. a string or a number. Later when things like ngList and
ngOptions were added or became more complex then various hacks were put
in place to make it look like it worked well with those but it doesn't.

-------------

Just to be clear what is happening, lets name the objects:

```js
var option1 = { uid: 1, name: 'someName1' };
var option2 = { uid: 2, name: 'someName2' };
var option3 = { uid: 3, name: 'someName3' };

var initialItem = { uid: 1, name: 'someName1' };

model {
  options: [option1, option2, option3],
  selected: initialItem
};
```

Now when we begin we have:

```js
expect(model.selected).toBe(initialItem);
expect(model.selected.uid).toEqual(option1.uid);
expect(model.selected).not.toBe(option1);
```

So although `ngOptions` has found a match between an option and the
modelValue, these are not the same object.

Now if we change the properties of the `model.selected` object, we are
effectively changing the `initialItem` object.

```js
model.selected.uid = 3;
model.selected.name = 'someName3';

expect(model.selected).toBe(initialItem);
expect(model.selected.uid).toEqual(option3.uid);
expect(model.selected).not.toBe(option3);
```

At the moment `ngModel` only watches for changes to the object identity
and so it doesn't trigger an update to the `ngOptions` directive.

This commit fixes this in `ngOptions` by adding a **deep** watch on the
`attr.ngModel` expression...

```js
scope.$watch(attr.ngModel, updateOptions, true);
```

You can see that in this Plunker:
http://plnkr.co/edit/0PE7qN5FXIA23y4RwyN0?p=preview

-------

But this isn't the end of the story. Since `ngModel` and `ngOptions` did
not make copies between the model and the view, we can't go around just
changing the properties of the `model.selected` object. This is particularly
important in the situation where the user has actually chosen an option,
since the `model.selected` points directly to one of the option objects:

```js
// User selects "someName2" option
expect(model.selected).toBe(option2);
expect(model.selected.uid).toEqual(option2.uid);
expect(model.selected).not.toBe(initialOption);
```

If we now change the `model.selected` object's properties we are actually
changing the `option2` object:

```js
expect(model.selected).toBe(option2);

model.selected.uid = 3;
model.selected.name = 'someName3';

expect(model.selected).toBe(option2);
expect(model.selected).not.toBe(option3);

expect(option2.uid).toEqual(3);
expect(option2.name).toEqual('someName3');
```

which means that the options are now broken:

```js
expect(model.options).toEqual([
  { uid: 1, name: 'someName1' },
  { uid: 3, name: 'someName3' },
  { uid: 3, name: 'someName3' }
]);
```

This commit fixes this in `ngOptions` by making copies when reading the
value if `track by` is being used. If we are not using `track by` then
we really do care about the identity of the object and should not be
copying...

You can see this in the Plunker here:
http://plnkr.co/edit/YEzEf4dxHTnoW5pbeJDp?p=preview

Closes #10869
Closes #10893feat(ngOptions): add support for disabling an option

This patch adds support for disabling options based on model values. The
"disable when" syntax allows for listening to changes on those model values,
in order to dynamically enable and disable the options.

The changes prevent disabled options from being written to the selectCtrl
from the model. If a disabled selection is present on the model, normal
unknown or empty functionality kicks in.

Closes #638
Closes #11017perf(ngOptions): only watch labels if a display expression is specified

#11052fix(ngOptions): support one-time binding on the option values

Utilize the $watchDelegate on the watcher used to detect changes to the labels.

Closes #10687
Closes #10694fix(ngOptions): prevent infinite digest if track by expression is stable

Closes #9464refact(ngOptions): move into its own file

Since select is not aware of ngOptions, it makes sense to move it into its
own file for more easy maintenance.fix(ngOptions): ensure that the correct option is selected when options are loaded async

**Major reworking of select and ngOptions**:

* The `SelectController` is now used as an abstraction for the `select` and `ngOptions` directives
to override to get their desired behaviour
* The `select` directive is completely oblivious to the ngOptions directive now - the `ngOptions`
directive could be deleted without having to make any changes to the `select` directive.
* Select related directives (single/multiple/ngOptions) can provide specific versions of
`SelectController.writeValue` and `SelectController.readValue`, which are responsible for getting
the `$viewValue` in or out of the actual `<select>` element and its `<option>` children.

BREAKING CHANGE:

When using `ngOptions`: the directive applies a surrogate key as the value of the `<option>` element.
This commit changes the actual string used as the surrogate key. We now store a string that is computed
by calling `hashKey` on the item in the options collection; previously it was the index or key of the
item in the collection.

(This is in keeping with the way that the unknown option value is represented in the select directive.)

Before you might have seen:

```
<select ng-model="x" ng-option="i in items">
  <option value="1">a</option>
  <option value="2">b</option>
  <option value="3">c</option>
  <option value="4">d</option>
</select>
```

Now it will be something like:

```
<select ng-model="x" ng-option="i in items">
  <option value="string:a">a</option>
  <option value="string:b">b</option>
  <option value="string:c">c</option>
  <option value="string:d">d</option>
</select>
```

If your application code relied on this value, which it shouldn't, then you will need to modify your
application to accommodate this. You may find that you can use the `track by` feaure of `ngOptions`
as this provides the ability to specify the key that is stored.

BREAKING CHANGE:

When iterating over an object's properties using the `(key, value) in obj` syntax
the order of the elements used to be sorted alphabetically. This was an artificial
attempt to create a deterministic ordering since browsers don't guarantee the order.
But in practice this is not what people want and so this change iterates over properties
in the order they are returned by Object.keys(obj), which is almost always the order
in which the properties were defined.

Closes #8019
Closes #9714
Closes #10639Support `Decimal Proposal` (#8901)
Add tokens to js parsers (#8529)
JS: Cleanup `loc.js` (#8678)

* Cleanup js `loc.js`

* Simplify `composeLoc`

* Simplify `locEnd`

* Simplify

* Fix Ast

* Remove use of loc

* Remove use of locQuote and unquote number keys (#8508)

* Quote and unquote number keys

* Add changelog entry

* Add tests for escapes

* Fix idempotency

* Only run flow-repo/ tests with flow

271 jsfmt.spec.js in flow-repo use only the flow parser.
18 use flow and babel.
Now, all of them use only flow.

* Don’t unquote negative numbers

* Don’t quote/unquote numbers in TypeScript

* Quote BigInt

* Fix AST check

* Fix condition

* Fix BigInt to string

* Fix ESLint not recognizing BigInt

* Only quote/unquote “simple” numbers

* No need to clean BigIntLiteral anymore

* Add tests for 1. and .1

* Fix 1. and .1

* Remove unnecessary babel-ts from tests

* Only unquote numbers for babel

* Update changelogTest: Fix parsers (#8278)
Support HTML-like Comments(only in html) (#8173)
Fix a failed test on `flow` parser (#7501)

* Add failed tests

* fix ast diff

* Delete dead code feat: add new parser `babel-ts` to parse TypeScript syntaxes via Babel (#6400)

* feat: add new parser `babel-ts` to parse TypeScript syntaxes via Babel

* docs: document parser babel-ts

* chore: enable babel-ts in markdown and worker.js

* verify all TS tests against babel-ts except disabled by disableBabelTS

* support for TSDeclareMethod; fix abstract properties and methods

* fix embedded angular templates and styles

* fix TSImportType

* simplify babel options combinations

* fix method decorators

* fix ranges

* work around loc inconsistencies for SequenceExpression

* don't print trailing comma in type parameters (unsupported in TS < 3.3)

* preserve quotes for class properties

* align printing of single-parameter functions

* fix comments in degenerate single-element unions and intersections

* fix comments for methods

* fix comments for mapped types

* edit docs, change 'since' to 2.0.0

* add changelog

* fix code sample on playground

* update snapshots after rebase

Co-authored-by: Georgii Dolzhykov <thorn.mailbox@gmail.com>Get rid of TSParenthesizedType nodes before proceeding with formatting (#6605)

* get rid of TSParenthesizedType nodes before proceeding with formatting

* fix parens for TSIndexedAccessType, TSFunctionType, TSConditionalType

fixes #6603

* workaround edge cases with one-item unions and intersections

* fix parens for TSInferType

* fix parens for rest elements in tuple types

* refactoring

* fix function types in conditional types

* move tests for rest and optional tuple elements

* fix comment issues

* tests for unions and intersections

* add parens around multiline unions in tuple

* move the parens check for TS nodes closer to the one for Flow nodes

* update CHANGELOG.unreleased.md

* remove dead code

* fix parens for TSConstructorType

* better wording in CHANGELOG.unreleased.mdSupport typescript 3.6 (#6519)

feat: support HTML/Vue/Angular (#5259)
feat(javascript): support BigIntLiteral (#4697)
Update babylon & flow (#4536)

* Support new node types for optionals

* Update babylon

* Fix decorator tests

* fix manual errors

* Update flow

* pretty print

* enable option for flow to support ??

* fix AST_COMPARE=1

* fix lint and explicitly test 1_2_3 syntax for flowNew: Format Angular Component styles (#4361)

* New: Format Angular Component styles and template

* Clean AST

* Cleanuprefactor(massageAst): move stripLocation to corresponding plugins (#4477)
Added support for the graph ql comment tag (#4395)

* Added support for the graph ql comment tag

As described in the issue https://github.com/prettier/prettier/issues/4360
Prettier still adds a space inbetween the comment tag and the template literal.

* Added comment explaining the random spaces around GraphQL

* Fixed failing AST_COMPARE testsrefactor(massageAst): move target props to corresponding plugins (#4430)
feat: split out JSON5 (#4367)

* feat: split out JSON5

* test: update snapshots

* test: update debug-check tests

* feat(playground): use JSON's code sample for JSON5

* fix: add missing trailing newlineExtract cleanAST to language-specific files (#3610)

* Extract cleanAST to language-specific files

* Fix lint

* Fix clean-ast for vue and glimmerMerge pull request #19420 from Mugen87/dev49

VRMLLoader: Handle Collision node like other grouping nodes.Merge pull request #19312 from Mugen87/dev49

VRMLLoader: Basic support for Extrusion.Merge pull request #19283 from Mugen87/dev49

VRMLLoader: Add support for WorldInfo node.Merge pull request #19287 from Mugen87/dev45

VRMLLoader: Add support for ElevationGrid.Merge pull request #17888 from Mugen87/dev33

VRMLLoader: Add support for PixelTexture.Merge pull request #16726 from Mugen87/dev30

VRMLLoader: New implementationUpdated to CodeMirror 5.14.2Editor: Reworked scripting UI. Implemented CodeMirror.Editor: Added CodeMirror.Merge pull request #19113 from mrdoob/gltfexporter

GLTFExporter: Remove forceIndices.Merge pull request #18924 from Mugen87/dev41

GLTFExporter: Better handle point and line geometries.Merge pull request #18756 from Mugen87/dev43

Examples: Clean up.Merge pull request #18647 from kinolaev/patch-1

GLTFExporter: Fix mesh cache keyMerge pull request #18584 from Mugen87/dev42

Material: Make .vertexColors a boolean.Merge pull request #18225 from Mugen87/dev29

Examples: Clean up.Updated jsm files.Re-generated examples/jsm files.JSM: Regenerated jsm files.Merge pull request #15977 from garyo/feature/gltf-exporter-jsm

Update GLTFExporter to jsmMerge pull request #11252 from apache/fix/merge-release-to-master

Fix/merge release to masterRelease 4.2.1-rc.1Merge branch 'release'Merge branch 'release'child_process,cluster: allow using V8 serialization API

Add an `serialization` option that allows child process IPC to
use the (typically more powerful) V8 serialization API.

Fixes: https://github.com/nodejs/node/issues/10965

PR-URL: https://github.com/nodejs/node/pull/30162
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Gus Caplan <me@gus.host>
Reviewed-By: David Carlier <devnexen@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>child_process: setup stdio on error when possible

As more spawn() errors are classified as runtime errors, it's
no longer appropriate to only check UV_ENOENT when determining
if stdio can be setup. This commit reverses the check to look
for EMFILE and ENFILE specifically.

PR-URL: https://github.com/nodejs/node/pull/27696
Fixes: https://github.com/nodejs/node/issues/26852
Reviewed-By: Rich Trott <rtrott@gmail.com>
Reviewed-By: Ben Noordhuis <info@bnoordhuis.nl>child_process: only stop readable side of stream passed to proc

Closing the underlying resource completely has the unwanted side effect
that the stream can no longer be used at all, including passing it
to other child processes.

What we want to avoid is accidentally reading from the stream;
accordingly, it should be sufficient to stop its readable side
manually, and otherwise leave the underlying resource intact.

Fixes: https://github.com/nodejs/node/issues/27097
Refs: https://github.com/nodejs/node/pull/21209

PR-URL: https://github.com/nodejs/node/pull/27373
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Gireesh Punathil <gpunathi@in.ibm.com>child_process: rename _validateStdtio to getValidStdio

The name indicated only validation while it did much more and it
returned a different value to the callee function. The underscore
was also not necessary as the function is internal one way or the
other.

PR-URL: https://github.com/nodejs/node/pull/26809
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>child_process: fire close event from stdio

PR-URL: https://github.com/nodejs/node/pull/22892
Reviewed-By: Anna Henningsen <anna@addaleax.net>child_process: close pipe ends that are re-piped

when t0 and t1 are spawned with t0's outputstream [1, 2] is piped into
t1's input, a new pipe is created which uses a copy of the t0's fd.
This leaves the original copy in Node parent, unattended. Net result is
that when t0 produces data, it gets bifurcated into both the copies

Detect the passed handle to be of 'wrap' type and close after the
native spawn invocation by which time piping would have been over.

Fixes: https://github.com/nodejs/node/issues/9413
Fixes: https://github.com/nodejs/node/issues/18016

PR-URL: https://github.com/nodejs/node/pull/21209
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Anna Henningsen <anna@addaleax.net>lib: extract validateString validator

Pulls out a common argument validator to `internal/validators`

PR-URL: https://github.com/nodejs/node/pull/22101
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Trivikram Kamat <trivikr.dev@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Anatoli Papirovski <apapirovski@mac.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>child_process: define EACCES as a runtime error

Access permission on the target child is currently thrown
as an exception. Bring this under the runtime error definition,
much like ENOENT and friends.

PR-URL: https://github.com/nodejs/node/pull/19294
Fixes: https://github.com/nodejs/help/issues/990
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Prince John Wesley <princejohnwesley@gmail.com>
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Ruben Bridgewater <ruben@bridgewater.de>lib: improve the usage of TypeError[INVALID_ARG_TYPE]

The initials of expected in TypeError[ERR_INVALID_ARG_TYPE]
are inconsistent. This change is to unify them.

PR-URL: https://github.com/nodejs/node/pull/16401
Fixes: https://github.com/nodejs/node/issues/16383
Reviewed-By: Joyee Cheung <joyeec9h3@gmail.com>
Reviewed-By: Gireesh Punathil <gpunathi@in.ibm.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>lib: tweak use of internal/errors

In addition refactor common.throws to common.expectsError

PR-URL: https://github.com/nodejs/node/pull/13829
Refs: https://github.com/nodejs/node/issues/11273
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: Michael Dawson <michael_dawson@ca.ibm.com>
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>lib: remove excess indentation

In anticipation of stricter linting for indentation, remove instances of
extra indentation that will be flagged by the new rules.

PR-URL: https://github.com/nodejs/node/pull/14090
Reviewed-By: Benjamin Gruenbaum <benjamingr@gmail.com>
Reviewed-By: Tobias Nießen <tniessen@tnie.de>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>child_process: use internal/errors

PR-URL: https://github.com/nodejs/node/pull/14009
Refs: https://github.com/nodejs/node/issues/11273
Reviewed-By: Matteo Collina <matteo.collina@gmail.com>
Reviewed-By: Refael Ackermann <refack@gmail.com>
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Luigi Pinca <luigipinca@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>child_process: improve ChildProcess validation

This commit improves input validation for the ChildProcess
internals. It became officially supported API a while back, but
never had any validation.

Refs: https://github.com/nodejs/node/issues/12177
PR-URL: https://github.com/nodejs/node/pull/12348
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Santiago Gimeno <santiago.gimeno@gmail.com>child_process: minor cleanup of internals

This commit removes self = this style assignments and replaces
some array iteration functions with a simpler for loop.

PR-URL: https://github.com/nodejs/node/pull/12348
Reviewed-By: James M Snell <jasnell@gmail.com>
Reviewed-By: Santiago Gimeno <santiago.gimeno@gmail.com>child_process: refactor internal/child_process.js

* Prefer === to == where possible
* Remove condition that will always be false
* Prefer for-loop statements to forEach where possible for perfomance reasons

PR-URL: https://github.com/nodejs/node/pull/11366
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Sam Roberts <vieuxtech@gmail.com>
Reviewed-By: Michaël Zasso <targos@protonmail.com>
Reviewed-By: Brian White <mscdex@mscdex.net>lib: fix style issues after eslint update

With an indentation style of two spaces, it is not possible to indent
multiline variable declarations by four spaces. Instead, the var keyword
is used on every new line.
Use const instead of var where applicable for changed lines.

PR-URL: https://github.com/nodejs/io.js/pull/2286
Reviewed-By: Roman Reiss <me@silverwind.io>child_process: expose ChildProcess constructor

Creates two new internal modules (child_process and socket_list) for
better readability.

Exposes the ChildProcess constructor from the child_process module so
one can now `require(‘child_process’).ChildProcess`

Fixes: https://github.com/nodejs/io.js/issues/1751
PR-URL: https://github.com/nodejs/io.js/pull/1760
Reviewed-By: Chris Dickinson <christopher.s.dickinson@gmail.com>node: allow multiple arguments passed to nextTick

PR-URL: https://github.com/iojs/io.js/pull/1077
Reviewed-by: Colin Ihrig <cjihrig@gmail.com>child_process: add debug and error details

This commit adds debug() calls to spawn() and spawnSync(), and
attaches additional information to Error objects.

Fixes: https://github.com/iojs/io.js/issues/720
PR-URL: https://github.com/iojs/io.js/pull/721
Reviewed-By: Colin Ihrig <cjihrig@gmail.com>
Reviewed-By: Trevor Norris <trev.norris@gmail.com>child_process: don't throw on EAGAIN

Signed-off-by: Fedor Indutny <fedor@indutny.com>child_process: don't throw on EMFILE/ENFILE

EMFILE and ENFILE mean 'out of file descriptors'.  It's a run-time error
and as such should emit an error on the child process object, not throw
an exception.

Fixes #7453.

Signed-off-by: Timothy J Fontaine <tjfontaine@gmail.com>child_process: add path to spawn ENOENT Error

Add a file property to the ENOENT Error returned from ChildProcess's
spawn function.

Signed-off-by: Timothy J Fontaine <tjfontaine@gmail.com>child_process: js bits for spawnSync/execSync

This implements the user-facing APIs that lets one run a child process
and block until it exits.

Logic shared with the async counterpart of each function was refactored
to enable code reuse.

Docs and tests are included.Merge branch 'master' into v0.6-merge

Conflicts:
	src/node.ccchild_process: Separate 'close' event from 'exit'

Currently, a child process does not emit the 'exit' event until 'close' events
have been received on all three of the child's stdio streams.  This change makes
the child object emit 'exit' when the child exits, and a new 'close' event when
all stdio streams are closed.Merge branch 'v0.6'

Conflicts:
	src/node_version.hAdd test-child-process-fork2 and fixes to make it workMerge branch 'ipc-binding'Fixed a lot of jslint errors.

Fixes #1831Remove debug codechild_process_uv: Handle spawn errorsForgot to add child_process_uv.jsMerge pull request #15846 from mrdoob/editor

Editor: Added animation support for dae files.Merge pull request #15391 from jbaicoianu/colladaloader-materials-fix

ColladaLoader: Support bump and ambient material techniques, added uv2 layerMerge pull request #14475 from Mugen87/dev1

ColladaLoader: Added support for TGA-texturesMerge pull request #13817 from Mugen87/dev3

ColladaLoader: Make image parsing more fault tolerant.Merge pull request #13802 from Mugen87/dev3

ColladaLoader: Added support for emission maps.Merge pull request #13801 from Mugen87/dev4

ColladaLoader: Removed usage of alpha maps.ColladaLoader: Clean up.Merge pull request #13255 from poof86/patch-6

ColladaLoader: Add parsing of double sided extra effect elementsMerge pull request #13260 from Mugen87/dev8

ColladaLoader: Refactor transparency handlingColladaLoader: Clean upMerge pull request #13216 from Mugen87/dev8

ColladaLoader: Improve evaluation of transparencyMerge pull request #13007 from Mugen87/dev7

ColladaLoader: Make loading of textures more fault tolerantMerge pull request #12212 from Mugen87/examples

Replace ColladaLoader with ColladaLoader2update build and example.Fix module build.Fix moduleMerge branch 'master' of github.com:ecomfe/echartsLess: Fix inline comments contains `/*` (#8360)
refactor(css): calculate correct location data for value-* nodes (#8266)

* calculate correct loc for value-* nodes

* update clean.js to fix idempotence testsrefactor css comments (#7021)

* refactor css comments

* workarounds for postcss-less location bugs

* improve replaceQuotesInInlineComments

* update changelog

* fix comments in selectors

* fix comments in values

* use \ufffe instead of \0 because that's what these characters are for

see http://www.unicode.org/faq/private_use.html#nonchar6

* fix quoted urls

Co-authored-by: Georgii Dolzhykov <thorn.mailbox@gmail.com>Merge pull request #16698 from yomboprime/jsm_convexbreaker

JSM: Added module and TS file for ConvexObjectBreakerMerge pull request #16697 from yomboprime/move_to_misc

Move to js/misc ConvexObjectBreaker and GPUComputationRendererMerge pull request #14645 from Mugen87/dev18

Examples: Clean upMerge pull request #14616 from yomboprime/bufferedBreak

Support BufferGeometry in ConvexObjectBreaker. Fixes #14609Merge pull request #14046 from Mugen87/dev7

ConvexObjectBreaker: Clean upNew example: break objects by throwing balls (#9493)

* New webgl_physics_brick demo. Cutting a convex by a plane works, but it must be refactored to work from Geometry, not from "segmentedobject"

* webgl_physics_brick: Splitting a convex mesh with a plane works.

* webgl_physics_brick: Preparing to refactor objects

* webgl_physics_brick: Refactored objects to hang on the THREE.Object3d

* webgl_physics_brick: Radial subdivision works. To do: non-radial one.

* webgl_physics_brick: Non-radial subdivision works.

* 'breaking things' example works.

* added webgl_physics_convex_break to example index. Aded a pyramid.

* webgl_physics_convex_break: Add friction

* webgl_physics_convex_break: Add velocity and angular vel. from parent.

* webgl_physics_convex_break: Change guideline comment.

* webgl_physics_convex_break: Changed page title.Merge pull request #16486 from Mugen87/dev30

JSM: Add module and TS file for ColladaLoader.Merge pull request #17600 from Mugen87/dev34

VRMLLoader: Make normal computation more robuste.Merge pull request #16940 from Mugen87/dev36

VRMLLoader: Handle invalid geometry definitions.